/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 15.11.2024 11:08:15

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 70352;
#else
constexpr int kTensorArenaSize = 69328;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,48,48,1 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0038935178890824318, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data2[3] = { 25959, -29806, -29354, };
const TfArray<1, int> tensor_dimension2 = { 1, { 3 } };
const TfArray<3, float> quant2_scale = { 3, { 0.00014109641779214144, 0.00013219757238402963, 0.00015799984976183623, } };
const TfArray<3, int> quant2_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int8_t tensor_data3[3*1*1*32] = { 
  /* [0][0][][] */ 70,37,115,-100,-69,39,-2,17,5,67,12,-39,-11,-61,99,-4,-29,53,70,121,-20,3,12,-64,-126,127,-66,49,111,16,-17,8, 
  /* [1][0][][] */ 49,-25,-59,32,4,127,-12,2,122,-83,10,-66,-65,106,31,-42,93,-45,-5,-88,-103,24,123,80,34,30,23,-28,-106,-48,-4,-21, 
  /* [2][0][][] */ -24,66,-59,69,71,-28,-23,93,75,17,103,3,-79,-61,58,96,-59,-39,-7,-88,60,96,-29,-63,77,-39,-29,-127,-22,-58,64,-16, 
};
const TfArray<4, int> tensor_dimension3 = { 4, { 3,1,1,32 } };
const TfArray<3, float> quant3_scale = { 3, { 0.0038094439078122377, 0.0035691850353032351, 0.0042658173479139805, } };
const TfArray<3, int> quant3_zero = { 3, { 0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int32_t tensor_data4[32] = { -352, -429, -365, 416, 276, 626, -308, 353, 536, 1436, 412, -306, -144, 554, 71, -308, 569, -215, -184, -99, -439, 484, 727, 570, 458, 687, -125, 1211, 1406, -245, -421, -337, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<32, float> quant4_scale = { 32, { 5.075963053968735e-05, 5.1710576371988282e-05, 5.2692095778184012e-05, 5.7541386922821403e-05, 5.2046041673747823e-05, 5.2561183110810816e-05, 5.2485440392047167e-05, 5.5242828238988295e-05, 5.577972115133889e-05, 6.5084925154224038e-05, 5.5913966207299381e-05, 5.1237409934401512e-05, 5.8956076827598736e-05, 5.5966862419154495e-05, 5.8921243180520833e-05, 5.3781441238243133e-05, 5.6035303714452311e-05, 5.2487732318695635e-05, 5.4638137953588739e-05, 4.9790312914410606e-05, 5.2225655963411555e-05, 5.2997020247858018e-05, 6.2497776525560766e-05, 5.0720103899948299e-05, 5.6110235163941979e-05, 5.3639283578377217e-05, 6.5891326812561601e-05, 6.5456420998089015e-05, 6.8262241256888956e-05, 5.1040955440839753e-05, 5.3343803301686421e-05, 5.1744180382229388e-05, } };
const TfArray<32, int> quant4_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[32*1*1*48] = { 
  /* [0][0][][] */ -46,-56,105,3,96,-20,-95,-117,64,-108,-118,-8,52,3,-49,54,-61,-43,-76,-67,-77,-120,-5,109,-124,5,73,-53,114,-4,-28,-96,80,-69,-108,62,-127,-92,-101,26,75,-98,-113,97,52,-120,113,-28, 
  /* [1][0][][] */ -69,43,-68,-5,-44,92,51,-5,91,-127,-104,103,73,-46,27,65,102,-52,47,116,-51,-16,22,18,48,27,-66,124,18,11,93,-75,37,112,-13,24,49,76,-10,-90,-59,7,-37,-115,-23,34,-22,-72, 
  /* [2][0][][] */ 37,77,-69,94,-27,-74,81,84,-117,77,-34,110,82,-27,76,-120,-76,-39,27,43,-112,-24,107,9,-37,73,96,-3,-84,69,77,87,-82,-24,-108,-120,-96,93,102,-40,-127,-93,4,-8,-95,106,-27,-82, 
  /* [3][0][][] */ 87,-37,46,-24,-55,69,-92,54,67,32,61,15,105,104,81,14,125,109,-41,32,127,-73,-54,-88,-5,-89,-60,120,60,-76,86,21,-33,-26,2,0,-79,-16,51,62,-14,-61,-80,1,84,45,-38,-72, 
  /* [4][0][][] */ 68,86,11,46,-17,-7,48,27,80,73,-1,64,45,-55,-1,-69,-9,7,-53,28,127,-88,72,40,-2,14,58,-42,-34,53,-70,-44,56,121,29,-94,-44,5,-106,33,-39,-46,-70,-98,52,123,47,50, 
  /* [5][0][][] */ 118,-114,88,93,53,-98,35,77,127,-104,-22,-56,41,116,47,47,87,81,-66,120,52,66,31,-7,-99,-53,2,-91,66,50,26,-87,-17,15,-53,32,-108,-38,59,40,-85,-31,55,106,-34,44,36,-39, 
  /* [6][0][][] */ 16,-44,114,75,-91,-68,-5,63,-20,-89,11,-95,85,52,115,-126,39,-2,-2,101,-85,-127,109,56,-64,-88,-12,-62,-33,-122,44,-84,-96,-127,-51,-111,-13,40,-115,76,86,54,21,-16,-117,104,-89,-47, 
  /* [7][0][][] */ 127,51,-27,-39,-65,127,-8,7,127,-15,-93,22,66,-94,54,75,63,26,9,122,64,41,-9,94,-56,111,31,69,-65,116,-19,43,6,32,76,110,-98,94,-1,-41,101,-66,92,62,63,8,109,-112, 
  /* [8][0][][] */ 29,1,-34,-80,66,47,-62,-3,24,51,30,105,19,-29,-72,-61,-41,109,-53,34,48,-14,91,126,-99,102,61,88,-49,37,-82,127,110,-18,63,12,122,6,-7,84,85,119,-94,-113,-1,-9,-21,117, 
  /* [9][0][][] */ 19,55,127,68,100,-78,-19,-88,32,51,19,78,-8,-38,-55,-4,-21,28,-50,-39,16,120,-55,-92,103,16,13,37,6,-45,-35,114,57,13,44,9,-27,44,-10,-20,73,-61,78,-36,92,29,-52,75, 
  /* [10][0][][] */ -48,66,100,-62,-8,117,116,37,50,19,26,-58,109,86,-24,14,-22,90,-86,-50,-6,36,58,-58,44,64,-119,-97,-36,89,-88,-71,73,105,127,83,-32,14,-23,31,-26,123,-100,-44,-81,-45,5,-54, 
  /* [11][0][][] */ 111,26,-20,103,117,42,50,22,111,90,-71,111,-15,-98,23,-78,-72,-116,63,34,24,72,18,-127,-115,-106,-29,80,75,-16,20,-29,-99,-83,47,42,-73,76,-38,-76,-35,99,-87,3,-45,-72,-98,-100, 
  /* [12][0][][] */ 8,93,-55,-8,80,2,-40,24,-80,43,27,18,-43,1,41,-79,-87,-32,-43,-83,18,-10,13,81,-61,-42,105,-94,78,6,-28,103,-71,-75,-46,10,0,-69,-12,32,108,27,-109,-26,-15,-86,-1,127, 
  /* [13][0][][] */ 125,-86,104,98,100,122,75,82,82,-85,-7,-15,104,84,75,-39,-93,-51,-64,47,84,-15,127,-24,-68,35,24,12,-77,-77,87,51,62,110,-2,49,-74,-35,33,84,-60,93,-38,16,-52,45,-18,-17, 
  /* [14][0][][] */ -51,-112,81,64,62,-27,-15,-100,-74,-43,52,69,-25,-80,-85,-82,-53,-54,9,23,-36,30,1,60,-118,-78,-30,17,-104,-113,-80,36,99,-22,-28,10,85,108,35,-127,-9,-102,37,73,58,-106,48,-77, 
  /* [15][0][][] */ 14,-20,-20,68,97,-78,75,-105,70,-22,-61,12,116,-15,-84,-114,84,8,-82,23,52,15,57,104,95,82,25,110,33,67,63,-101,-15,5,-62,-8,-66,127,115,-86,27,117,-57,-28,42,-77,-31,-96, 
  /* [16][0][][] */ -47,-25,105,-51,51,119,-56,60,57,64,-121,84,3,-31,-39,-50,126,96,74,84,127,90,-23,72,-38,49,-45,55,-89,23,48,29,-79,86,74,72,-24,46,-38,-48,23,-28,85,93,51,118,85,2, 
  /* [17][0][][] */ 31,-91,29,90,-50,-127,-76,-108,34,-65,93,47,96,71,-124,50,21,50,102,112,-105,-17,16,-61,15,62,-83,18,102,-65,-34,73,-34,-20,27,3,-53,101,-97,-29,-104,-51,-19,-7,0,4,83,-110, 
  /* [18][0][][] */ -89,127,124,-58,-12,-101,-107,0,-12,69,-86,-51,-41,29,56,-41,20,-28,57,-27,94,-49,18,-81,20,-101,-20,107,22,27,-4,38,43,-15,-111,-106,-36,52,-29,56,-45,-7,-54,-12,-115,9,21,-4, 
  /* [19][0][][] */ 31,50,88,44,63,-79,104,99,100,-68,41,-10,-102,37,-59,64,84,-110,125,65,-23,88,-57,16,83,-85,34,-71,-100,-127,-71,51,91,-89,38,4,11,-71,-60,-111,48,-125,-88,17,-91,32,89,-92, 
  /* [20][0][][] */ -20,84,71,97,-83,98,38,50,29,11,-65,-2,-7,88,44,-69,-62,-48,-66,-37,20,-53,-89,-79,97,-55,-127,70,36,22,-45,112,77,45,-22,51,40,-20,-22,-114,-73,-24,-98,-109,-9,-66,-60,95, 
  /* [21][0][][] */ 112,44,83,-103,106,-58,88,34,15,-56,-83,52,21,51,-43,-87,-79,-16,38,1,127,-43,77,-69,74,-76,-28,91,31,21,-10,-11,19,30,-78,-103,119,104,-111,-25,-1,23,39,-30,-86,-67,-91,92, 
  /* [22][0][][] */ 50,-66,-50,-77,69,-32,86,69,-93,36,-90,-81,118,-121,-89,-86,53,93,-86,-35,97,-49,46,49,68,-19,-82,65,-44,-58,-59,-79,63,65,35,29,11,-19,-35,-127,-1,-5,18,80,40,-88,73,1, 
  /* [23][0][][] */ 85,-127,5,61,105,-110,-2,-91,71,-69,63,90,33,-100,25,-38,118,-19,-115,123,116,-78,124,-19,-25,-22,110,13,83,62,79,-29,-16,51,37,50,108,-25,-110,23,-119,15,23,-117,-95,-80,98,41, 
  /* [24][0][][] */ -59,-94,-90,-73,-74,-88,-54,-73,82,121,82,55,127,70,-28,-106,-54,57,37,-33,110,-69,-47,-15,66,-13,87,74,120,69,5,-49,17,15,64,41,-45,-76,71,-9,-63,-72,111,5,34,-20,47,76, 
  /* [25][0][][] */ -76,-68,-67,13,100,-74,-115,69,39,-93,-50,32,74,20,-109,-6,-64,74,29,-95,77,100,11,-40,2,-64,-88,24,73,-95,49,127,116,-87,54,89,110,-72,-19,1,-91,110,-90,11,85,49,57,58, 
  /* [26][0][][] */ 62,-122,-34,-35,-72,18,-13,13,-60,-81,72,82,-41,-37,6,-10,127,42,-72,-34,38,54,73,39,61,69,33,51,29,31,-94,15,2,-49,-60,-83,-63,42,-39,108,-92,107,40,22,-72,82,-52,80, 
  /* [27][0][][] */ 39,63,-6,-43,-86,-45,-42,-4,31,94,81,-72,-18,62,87,18,62,6,74,-52,-75,38,13,2,-96,44,-67,8,60,21,-3,8,83,98,-60,-33,-48,6,-46,83,-62,29,53,37,92,29,67,127, 
  /* [28][0][][] */ 81,42,98,62,-53,-61,-49,-54,-45,-65,93,93,-65,-36,42,108,46,112,-23,70,-25,56,-51,-66,-81,95,-43,-29,-54,-73,44,19,-73,23,76,79,54,-46,-8,43,127,31,-45,84,-41,0,59,69, 
  /* [29][0][][] */ 52,91,58,-53,-92,9,-127,3,100,-17,-94,-101,109,-111,-53,-15,-113,105,27,-71,-83,-38,56,2,-40,7,-50,-33,-112,-11,109,-6,50,1,-88,-62,-12,108,-12,100,50,112,-51,88,-3,107,-56,-27, 
  /* [30][0][][] */ 19,-71,-71,34,-107,17,-72,-18,108,-25,-11,-52,-110,9,51,11,-5,27,84,-110,37,-111,-123,14,-117,19,-75,108,-13,-118,-103,-2,-88,-71,-127,-64,5,-26,-10,23,82,-77,-21,92,96,-50,100,53, 
  /* [31][0][][] */ 80,-80,36,105,52,58,-66,-111,-35,-18,-79,-95,99,-127,-53,115,-89,-101,36,47,61,35,-36,106,43,-122,31,40,-81,-83,49,110,9,20,-102,-13,100,-34,-76,-119,61,-75,-36,39,2,-65,-39,22, 
};
const TfArray<4, int> tensor_dimension5 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant5_scale = { 32, { 0.0021572841797024012, 0.0021976993884891272, 0.0022394140250980854, 0.0024455089587718248, 0.0022119567729532719, 0.0022338503040373325, 0.0022306311875581741, 0.0023478202056139708, 0.0023706380743533373, 0.0027661093045026064, 0.0023763435892760754, 0.0021775898057967424, 0.0025056332815438509, 0.0023785915691405535, 0.0025041527114808559, 0.0022857112344354391, 0.0023815003223717213, 0.0022307285107672215, 0.0023221208248287439, 0.0021160882897675037, 0.0022195903584361076, 0.0022523733787238598, 0.0026561554986983538, 0.0021556043066084385, 0.0023846849799156189, 0.0022796695120632648, 0.002800381276756525, 0.0027818977832794189, 0.0029011452570557594, 0.0021692404989153147, 0.0022671115584671497, 0.0021991275716573, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int32_t tensor_data6[48] = { 1842, -1465, 6587, 1860, 3954, 139, 2063, 5538, -2118, -1424, -1290, 9262, 4474, 3223, 7666, -3968, -3061, 9214, 3771, 4120, 3503, 19580, 26870, 880, -1848, 1716, -615, -848, 2179, 2023, 5045, 9609, -1027, 491, 12283, 4165, 8481, 3107, 1140, -1553, 3682, -1785, 10531, -239, 375, 2697, -1608, 4604, };
const TfArray<1, int> tensor_dimension6 = { 1, { 48 } };
const TfArray<48, float> quant6_scale = { 48, { 0.00021102624305058271, 0.00019581297237891704, 0.0001187486486742273, 0.00028233681223355234, 0.0001319233124377206, 0.00021464396559167653, 0.00014804794045630842, 0.00013733841478824615, 0.00019823996990453452, 0.00025806491612456739, 0.00022918064496479928, 8.4974300989415497e-05, 0.00015130620158743113, 0.0001858127216110006, 0.00010972513700835407, 0.000133042864035815, 0.0001758716389304027, 0.0001092516613425687, 0.00015678210183978081, 0.00019510512356646359, 0.00023396125470753759, 5.5221426009666175e-05, 3.763674249057658e-05, 0.00027070517535321414, 0.00021833689243067056, 0.00017546521848998964, 0.00020883369143120944, 0.00022660195827484131, 0.00018283483223058283, 0.00020111133926548064, 0.00012746629363391548, 9.1860165412072092e-05, 0.00017616811965126544, 0.00024745662813074887, 7.6727286796085536e-05, 0.00015011061623226851, 0.00010335224214941263, 0.00018280356016475707, 0.00027739509823732078, 0.00022637222718913108, 0.00016833108384162188, 0.00025487176026217639, 8.4531595348380506e-05, 0.00036805914714932442, 0.00027651170967146754, 0.00019386141502764076, 0.00027964790933765471, 0.0001674663508310914, } };
const TfArray<48, int> quant6_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[48*1*1*8] = { 
  /* [0][0][][] */ -19,17,127,-13,0,40,-12,-69, 
  /* [1][0][][] */ 91,-66,72,-86,-17,-72,127,26, 
  /* [2][0][][] */ 57,71,86,-69,-77,20,127,-33, 
  /* [3][0][][] */ 7,18,-2,-25,20,-52,127,1, 
  /* [4][0][][] */ 127,-43,-67,-37,-99,-76,-36,73, 
  /* [5][0][][] */ 31,79,127,-6,24,-48,24,-38, 
  /* [6][0][][] */ 117,113,-12,127,-81,30,24,101, 
  /* [7][0][][] */ -37,-11,3,35,33,-125,-127,-36, 
  /* [8][0][][] */ 100,72,-37,74,-54,17,-127,-45, 
  /* [9][0][][] */ 127,-27,-33,45,3,-34,27,-84, 
  /* [10][0][][] */ 69,21,-8,14,-29,127,36,6, 
  /* [11][0][][] */ 127,-12,5,-121,107,-81,-75,88, 
  /* [12][0][][] */ -71,120,90,-34,13,57,-99,127, 
  /* [13][0][][] */ 127,13,-89,16,25,-105,17,-98, 
  /* [14][0][][] */ 119,27,-7,-24,-127,34,-76,-15, 
  /* [15][0][][] */ 3,6,-94,-34,-127,-46,126,104, 
  /* [16][0][][] */ -13,-44,127,3,117,-61,-69,-27, 
  /* [17][0][][] */ 16,-12,93,-6,127,-63,-75,1, 
  /* [18][0][][] */ 127,-51,125,45,-29,39,-33,-6, 
  /* [19][0][][] */ 52,48,58,-55,-35,-127,6,-42, 
  /* [20][0][][] */ 38,-35,69,127,8,-71,-92,80, 
  /* [21][0][][] */ 87,-22,-80,-127,59,-62,13,99, 
  /* [22][0][][] */ -74,-127,-41,-47,64,-62,96,-87, 
  /* [23][0][][] */ -19,25,36,-41,-102,-127,-1,-19, 
  /* [24][0][][] */ 127,8,67,53,-17,-20,-92,81, 
  /* [25][0][][] */ 85,66,-6,-59,-26,-16,-30,127, 
  /* [26][0][][] */ -78,-27,26,-127,106,-1,-42,-74, 
  /* [27][0][][] */ 98,127,-2,-46,7,51,20,7, 
  /* [28][0][][] */ 34,125,-9,0,8,-49,-9,127, 
  /* [29][0][][] */ 121,31,100,113,46,-36,-127,67, 
  /* [30][0][][] */ 127,-115,-84,105,57,-1,-73,88, 
  /* [31][0][][] */ 104,-88,19,53,-84,-117,-127,53, 
  /* [32][0][][] */ -118,-64,46,-127,86,-31,-49,-97, 
  /* [33][0][][] */ 10,16,45,45,32,-100,127,61, 
  /* [34][0][][] */ -81,93,127,-77,114,-85,-90,94, 
  /* [35][0][][] */ -86,24,37,112,-4,127,27,-15, 
  /* [36][0][][] */ 85,32,-36,-127,42,-16,22,45, 
  /* [37][0][][] */ 46,50,-8,7,-67,127,59,49, 
  /* [38][0][][] */ -12,-65,18,94,20,55,6,127, 
  /* [39][0][][] */ 21,7,-127,45,-8,-44,-34,62, 
  /* [40][0][][] */ 53,17,-79,7,-47,62,-51,127, 
  /* [41][0][][] */ 31,9,19,-40,-98,-127,-21,-2, 
  /* [42][0][][] */ -89,55,-90,103,-10,80,-28,-127, 
  /* [43][0][][] */ -19,3,-26,-127,-18,1,-15,-86, 
  /* [44][0][][] */ 64,33,30,78,22,127,-56,38, 
  /* [45][0][][] */ 3,73,-27,16,127,-38,-71,-14, 
  /* [46][0][][] */ 59,-82,-1,127,80,25,-47,76, 
  /* [47][0][][] */ -25,-83,55,-8,127,14,38,26, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant7_scale = { 48, { 0.0029858164489269257, 0.0027705633547157049, 0.0016801779856905341, 0.0039947917684912682, 0.0018665867391973734, 0.0030370035674422979, 0.0020947344601154327, 0.0019432051340118051, 0.0028049030806869268, 0.0036513679660856724, 0.0032426835969090462, 0.0012023037998005748, 0.0021408358588814735, 0.0026290696114301682, 0.0015525041380897164, 0.0018824272556230426, 0.002488412894308567, 0.0015458049019798636, 0.0022183144465088844, 0.0027605479117482901, 0.0033103243913501501, 0.00078132952330633998, 0.00053252332145348191, 0.0038302151951938868, 0.003089254954829812, 0.0024826624430716038, 0.0029547938611358404, 0.0032061976380646229, 0.002586935181170702, 0.0028455301653593779, 0.0018035243265330791, 0.001299732131883502, 0.0024926078040152788, 0.0035012708976864815, 0.0010856165317818522, 0.002123919315636158, 0.0014623338356614113, 0.0025864928029477596, 0.0039248713292181492, 0.0032029470894485712, 0.0023817212786525488, 0.0036061878781765699, 0.0011960399569943547, 0.0052076792344450951, 0.0039123720489442348, 0.0027429508045315742, 0.0039567463099956512, 0.0023694862611591816, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[8] = { -14527, -2717, 5104, -13570, 6129, -6672, 9242, 12546, };
const TfArray<1, int> tensor_dimension8 = { 1, { 8 } };
const TfArray<8, float> quant8_scale = { 8, { 0.00016384848277084529, 0.00017501930415164679, 0.00011088432074757293, 8.7507833086419851e-05, 6.8593697506003082e-05, 0.00012417555262800306, 8.4351799159776419e-05, 0.00012297915236558765, } };
const TfArray<8, int> quant8_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int8_t tensor_data9[8*1*1*48] = { 
  /* [0][0][][] */ 127,-23,23,-25,19,56,12,34,108,-79,55,14,-39,64,22,-47,17,-23,-23,-12,5,-56,10,-24,-53,-37,-36,-34,-25,79,-20,34,29,-39,18,-28,58,-60,-51,10,22,-25,-71,-2,58,-26,47,-36, 
  /* [1][0][][] */ 54,-2,-12,62,47,62,22,30,67,-78,0,5,36,17,-39,-18,-38,-42,-65,-3,2,-42,51,72,-4,-59,-3,39,-28,57,-51,127,-27,39,-25,-28,-59,-20,-7,-22,-50,-22,-38,37,15,-7,6,-83, 
  /* [2][0][][] */ -27,-31,-88,37,-68,-20,-6,42,-95,-66,-82,-38,-43,32,-127,-15,57,-71,36,-23,102,85,-22,-7,35,84,17,-89,-60,7,57,6,-41,29,50,-73,65,-15,74,78,-36,79,32,-12,-86,50,-28,66, 
  /* [3][0][][] */ 3,-20,-12,39,-26,5,-9,51,76,100,-127,-26,17,-27,-29,73,-62,-12,-7,43,-22,7,72,17,3,6,-51,57,-31,26,-37,-32,10,23,31,9,61,-3,42,-4,-55,81,69,16,25,-15,-34,-35, 
  /* [4][0][][] */ -34,-80,11,-43,9,102,-58,-79,3,-55,69,32,-66,-33,-26,21,70,10,-23,42,-82,-22,115,-25,-97,-14,-4,11,10,-22,-8,64,-62,42,-33,51,-36,34,1,12,-46,34,-41,35,127,52,-6,-2, 
  /* [5][0][][] */ -66,-55,58,-127,-18,14,-35,-52,-2,73,-48,75,-73,26,55,16,71,57,63,18,36,-6,-13,-58,45,-64,1,-49,-6,-30,26,-79,-1,-38,61,1,-23,38,40,73,96,22,23,-19,-5,-5,-34,36, 
  /* [6][0][][] */ -67,-57,47,24,-59,-70,1,-68,-101,14,-119,45,28,-35,64,28,-29,17,10,127,-10,-13,79,57,-71,-15,56,15,26,-36,-43,-68,-24,69,79,-81,-49,85,55,-18,-63,72,87,-51,4,-38,-39,13, 
  /* [7][0][][] */ 21,-4,17,-12,7,26,-42,-39,-127,-28,95,28,8,-28,30,1,15,46,2,-19,-45,12,-14,-42,36,0,-37,13,-7,-19,-26,-49,-97,-53,-32,0,59,-24,-25,4,57,1,46,-20,20,-39,35,16, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant9_scale = { 8, { 0.0091013703495264053, 0.0097218817099928856, 0.0061593446880578995, 0.004860839806497097, 0.0038102071266621351, 0.0068976390175521374, 0.0046855299733579159, 0.0068311826325953007, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int32_t tensor_data10[48] = { -2579, 3438, 11333, 1378, -1068, -5872, -1579, 9951, 7465, -2774, -6629, -7237, -1922, 13887, 8244, 736, 7830, -5447, 6381, -1246, 19413, -2849, -1600, -2217, 4355, -5390, -206, -3009, 7500, -25200, -2433, 618, -3033, -2159, -1300, -2013, 6965, -5738, 1199, -11718, -1805, 5568, -3261, -751, 2666, -3587, 6629, -3362, };
const TfArray<1, int> tensor_dimension10 = { 1, { 48 } };
const TfArray<48, float> quant10_scale = { 48, { 0.0002181338204536587, 0.0001449313567718491, 8.119672565953806e-05, 0.00011949311010539532, 0.00020481953106354922, 0.00013258756371214986, 0.0002340735518373549, 0.00013141361705493182, 0.00015543804329354316, 0.00052883289754390717, 0.00025659360107965767, 8.0259575042873621e-05, 0.00026813551085069776, 8.5211584519129246e-05, 0.00017321210179943591, 0.00020317635789979249, 0.00012993598647881299, 0.00014645070768892765, 0.00011631104280240834, 0.00028507193201221526, 7.5327130616642535e-05, 0.00024024677986744791, 0.00021553879196289927, 0.00022942737268749624, 0.0001610218605492264, 0.00022917913156561553, 0.00019043555948883295, 0.00032338086748495698, 0.0001187969246529974, 8.6749038018751889e-05, 0.00017190376820508391, 0.00015816192899364978, 0.00013924366794526577, 0.00031396906706504524, 0.00010251361527480185, 0.00014726660447195172, 0.00016901108028832823, 8.8060260168276727e-05, 7.5428622949402779e-05, 9.1946058091707528e-05, 0.00021343702974263579, 0.00015712802996858954, 0.00021720756194554269, 0.00014019019727129489, 0.0001065870383172296, 7.5141164415981621e-05, 0.00017453861073590815, 0.00017808002303354442, } };
const TfArray<48, int> quant10_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int8_t tensor_data11[1*3*3*48] = { 
  /* [0][0][][] */ 79,71,5,42,-2,-1,-52,23,37,-71,38,-9,15,-94,-32,41,86,24,-82,-5,87,9,-20,-11,72,20,24,2,-83,22,-13,-51,127,12,100,30,-38,32,127,30,-78,57,-110,-61,35,-82,-35,-5, 105,127,-101,78,12,49,-68,-127,46,38,127,36,-15,-12,-13,-9,-70,127,-103,30,47,127,42,-21,28,-6,10,127,-127,103,-28,-127,2,-27,22,75,-67,127,109,42,-127,-70,62,-14,16,31,-127,92, 52,39,26,36,0,-5,-36,36,29,-75,37,5,6,-68,-32,-27,81,-30,-44,-21,85,12,-25,42,47,58,18,-6,-24,3,-20,-29,116,18,94,14,-24,40,105,-11,-49,55,43,54,36,100,16,-16, 
  /* [0][1][][] */ -20,-69,-119,85,20,56,68,-29,35,33,-38,127,127,-4,-22,-82,-27,80,71,-20,-108,16,24,-88,31,56,19,17,9,112,19,55,40,127,48,45,-67,-14,-49,77,70,8,80,-127,12,-120,-10,127, 46,-114,-87,-127,126,9,127,-77,-127,127,8,88,-99,127,127,-26,-127,78,23,127,39,1,127,2,-127,127,36,-84,-75,49,-127,92,82,-86,53,127,127,70,2,127,111,-58,-30,2,124,-73,-3,48, -15,-63,-111,59,-20,127,51,-16,31,39,-32,91,-11,3,-31,-25,-57,83,127,-49,-127,28,-71,127,13,10,21,35,68,78,35,41,10,1,-24,-124,-38,-11,7,16,43,69,-23,122,-10,112,-34,88, 
  /* [0][2][][] */ -30,-32,11,31,-16,14,-11,12,28,-33,9,33,39,-89,-36,33,86,9,8,5,-91,11,-3,-4,19,18,-7,5,-1,8,37,12,11,12,127,4,-14,89,68,52,12,55,127,-32,-54,-127,2,-29, -127,-12,-127,43,-127,8,-63,-5,25,90,-72,94,-13,-36,-9,127,-78,55,-96,-23,-107,13,6,-26,-20,98,-127,-26,-55,127,54,15,17,-22,19,27,-18,66,-61,69,-51,-127,-108,-22,-127,73,-97,93, -25,-33,20,21,3,0,-7,9,21,-55,-3,12,-6,-90,-34,-1,94,-36,101,10,-98,-9,0,30,16,8,-10,-2,14,3,34,12,41,8,93,29,-10,78,101,16,21,55,-55,42,-33,101,-9,-56, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant11_scale = { 48, { 0.010708434507250786, 0.0071148434653878212, 0.0039860387332737446, 0.0058660511858761311, 0.010054821148514748, 0.0065088728442788124, 0.011490934528410435, 0.0064512426033616066, 0.0076306285336613655, 0.025961002334952354, 0.012596468441188335, 0.0039400327950716019, 0.013163074851036072, 0.0041831326670944691, 0.0085031772032380104, 0.0099741565063595772, 0.0063787037506699562, 0.007189430296421051, 0.0057098399847745895, 0.013994502834975719, 0.0036978938151150942, 0.011793985031545162, 0.010581041686236858, 0.011262848041951656, 0.0079047447070479393, 0.011250661686062813, 0.0093486960977315903, 0.015875130891799927, 0.0058318749070167542, 0.0042586079798638821, 0.0084389494732022285, 0.0077643473632633686, 0.006835628766566515, 0.015413095243275166, 0.0050325086340308189, 0.0072294836863875389, 0.0082969442009925842, 0.0043229772709310055, 0.0037028761580586433, 0.0045137354172766209, 0.010477864183485508, 0.0077135921455919743, 0.01066296361386776, 0.0068820947781205177, 0.0052324775606393814, 0.0036887642927467823, 0.0085682971403002739, 0.0087421489879488945, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 3 };
const ALIGN(16) int32_t tensor_data12[48] = { 27931, 6895, 1616, 1466, 4810, 2188, 6108, 3282, 3068, -7616, 13059, 1444, 9215, 1972, 4729, 3242, 6762, -611, 10566, 287, 4458, -660, 3451, 6935, 2160, -3447, 2282, 11887, 748, 6924, 1964, 10324, 786, 6329, -525, -1514, 2517, 2529, 258, 1587, 14114, -1255, 14389, 4131, 1098, 4789, 5118, -1877, };
const TfArray<1, int> tensor_dimension12 = { 1, { 48 } };
const TfArray<48, float> quant12_scale = { 48, { 3.6914516385877505e-05, 0.00012236922339070588, 0.00020275542919989675, 0.00019250073819421232, 0.00015040385187603533, 0.00020018826762679964, 0.0001297471608268097, 0.00019578491628635675, 0.00015685602556914091, 9.5735420472919941e-05, 7.1729409683030099e-05, 0.00016321538714691997, 8.6298859969247133e-05, 0.00019722455181181431, 0.00014947740419302136, 0.00012684425746556371, 0.00011111554340459406, 0.00023410707945004106, 8.8442233391106129e-05, 0.00014538636605720967, 0.00015769498713780195, 0.00016777445853222162, 0.00016926684475038201, 0.00010607405420159921, 0.00018728691793512553, 0.0001690009084995836, 0.00019222903938498348, 7.9573255789000541e-05, 0.00024970324011519551, 0.00011113003711216152, 0.00017614229000173509, 8.9804583694785833e-05, 0.00018152427219320089, 0.0001274923124583438, 0.00015939009608700871, 0.00024991080863401294, 0.0002234159765066579, 0.00014986313180997968, 0.00026003882521763444, 0.00018991288379766047, 6.7198292526882142e-05, 0.00015159339818637818, 6.0713835409842432e-05, 0.00010695878154365346, 0.00018957784050144255, 0.00015833722136449069, 0.00011814281606348231, 0.00016036562738008797, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const ALIGN(16) int8_t tensor_data13[48*1*1*8] = { 
  /* [0][0][][] */ -127,58,-19,-17,77,45,-4,-56, 
  /* [1][0][][] */ -9,-57,-32,-11,-66,-127,4,22, 
  /* [2][0][][] */ -75,59,-5,-41,-63,23,-45,127, 
  /* [3][0][][] */ 48,44,68,-6,-56,-127,37,-29, 
  /* [4][0][][] */ 19,75,-114,46,-127,85,40,27, 
  /* [5][0][][] */ -34,45,36,-38,-88,-127,-64,-9, 
  /* [6][0][][] */ -48,127,94,-33,-53,-33,20,-36, 
  /* [7][0][][] */ 0,-6,31,62,4,-127,-1,47, 
  /* [8][0][][] */ 127,19,-80,82,-89,-72,-101,-10, 
  /* [9][0][][] */ 90,-46,-70,-85,13,-17,-50,127, 
  /* [10][0][][] */ -97,14,-1,127,15,75,22,-103, 
  /* [11][0][][] */ 28,31,64,-9,6,118,127,113, 
  /* [12][0][][] */ -62,-94,-52,-97,127,-35,-10,43, 
  /* [13][0][][] */ -22,-3,-11,49,14,-127,33,63, 
  /* [14][0][][] */ 54,70,127,38,63,-124,-81,-38, 
  /* [15][0][][] */ -38,68,127,73,-10,29,35,-85, 
  /* [16][0][][] */ -86,-39,38,-79,127,11,-46,-5, 
  /* [17][0][][] */ 38,-43,-44,1,-8,127,-23,33, 
  /* [18][0][][] */ -18,127,72,-37,-57,55,77,-71, 
  /* [19][0][][] */ 22,105,85,127,-32,23,45,27, 
  /* [20][0][][] */ 23,18,73,-127,-75,-4,81,-20, 
  /* [21][0][][] */ -124,85,51,-117,110,78,127,18, 
  /* [22][0][][] */ 67,-36,-85,62,47,-47,-59,127, 
  /* [23][0][][] */ 28,-78,-127,-30,66,-21,-54,81, 
  /* [24][0][][] */ 41,-8,-84,26,-66,33,-127,123, 
  /* [25][0][][] */ -24,-23,59,17,127,-14,-88,-48, 
  /* [26][0][][] */ 1,92,127,-33,-37,-16,53,-61, 
  /* [27][0][][] */ -41,50,127,-79,31,24,87,-105, 
  /* [28][0][][] */ 58,-5,87,127,65,-30,31,99, 
  /* [29][0][][] */ 61,73,110,18,-60,33,-127,93, 
  /* [30][0][][] */ 49,-1,-95,62,-127,-38,-49,64, 
  /* [31][0][][] */ 18,111,94,-72,-85,27,107,-127, 
  /* [32][0][][] */ 63,-8,-7,32,116,127,38,-33, 
  /* [33][0][][] */ 21,-40,-127,3,20,-20,-38,75, 
  /* [34][0][][] */ 22,-51,21,-127,-5,63,-13,13, 
  /* [35][0][][] */ -19,24,96,-12,2,-127,7,-20, 
  /* [36][0][][] */ -8,15,-43,-127,-11,8,13,-42, 
  /* [37][0][][] */ 66,-12,-21,-89,-88,127,-64,-86, 
  /* [38][0][][] */ 75,-54,-20,101,52,22,-22,127, 
  /* [39][0][][] */ 127,94,39,76,-16,103,-53,4, 
  /* [40][0][][] */ 46,-89,-127,-19,11,1,-52,97, 
  /* [41][0][][] */ 1,-61,-127,-105,-13,-81,-40,-16, 
  /* [42][0][][] */ 64,110,82,127,-90,-46,31,45, 
  /* [43][0][][] */ 127,-34,-119,-124,-78,-49,34,67, 
  /* [44][0][][] */ -3,83,110,-83,-83,-6,68,-127, 
  /* [45][0][][] */ 32,30,-127,70,-45,39,16,81, 
  /* [46][0][][] */ 49,-50,-71,-127,19,-28,-35,46, 
  /* [47][0][][] */ 86,-119,127,-69,79,-20,4,10, 
};
const TfArray<4, int> tensor_dimension13 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00059887440875172615, 0.0019852297846227884, 0.0032893572933971882, 0.0031229925807565451, 0.0024400432594120502, 0.0032477094791829586, 0.0021049240604043007, 0.0031762728467583656, 0.002544718561694026, 0.0015531422104686499, 0.0011636860435828567, 0.0026478883810341358, 0.0014000502415001392, 0.0031996283214539289, 0.002425013342872262, 0.0020578294061124325, 0.0018026581965386868, 0.0037979837507009506, 0.0014348227996379137, 0.0023586431052535772, 0.0025583293754607439, 0.0027218514587730169, 0.0027460628189146519, 0.0017208686331287026, 0.0030384073033928871, 0.0027417484670877457, 0.0031185848638415337, 0.0012909389333799481, 0.0040510045364499092, 0.0018028932390734553, 0.0028576049953699112, 0.0014569245977327228, 0.0029449183493852615, 0.0020683431066572666, 0.0025858294684439898, 0.0040543721988797188, 0.0036245391238480806, 0.0024312708992511034, 0.0042186817154288292, 0.0030810092575848103, 0.0010901765199378133, 0.0024593416601419449, 0.00098497734870761633, 0.0017352218274027109, 0.003075573593378067, 0.0025687485467642546, 0.0019166636047884822, 0.0026016558986157179, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int32_t tensor_data14[8] = { -14623, -38378, 3580, 7362, -17430, -473, -30800, -751, };
const TfArray<1, int> tensor_dimension14 = { 1, { 8 } };
const TfArray<8, float> quant14_scale = { 8, { 0.00015778053784742951, 6.7414061049930751e-05, 6.7407090682536364e-05, 6.5593769249971956e-05, 6.747992301825434e-05, 6.8104942329227924e-05, 5.4835920309415087e-05, 8.6728716269135475e-05, } };
const TfArray<8, int> quant14_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int8_t tensor_data15[8*1*1*48] = { 
  /* [0][0][][] */ 43,52,-79,52,14,22,-94,-27,9,-25,-4,-36,-13,3,48,13,48,-19,52,-27,17,-33,44,-2,18,-30,-21,19,-17,3,-20,-4,46,27,25,17,127,62,29,-23,0,-19,-5,-20,84,31,17,-50, 
  /* [1][0][][] */ 62,29,9,-1,36,93,-6,-24,33,62,-45,-79,114,-13,12,41,26,35,26,-84,127,-27,44,53,40,21,45,15,22,-60,67,81,54,104,5,114,61,29,24,22,88,16,42,26,22,44,103,-69, 
  /* [2][0][][] */ -11,16,78,127,-43,24,12,50,37,78,28,-77,-38,113,17,28,-85,-92,70,12,14,50,-53,-90,-38,-42,23,-8,-105,24,11,5,-46,-39,-95,-49,11,18,-96,-30,-24,-62,-35,18,60,-81,-40,17, 
  /* [3][0][][] */ -32,53,-80,-10,22,-83,5,67,116,-86,-46,18,-4,-16,13,67,25,8,-17,-31,-8,23,-79,37,-24,-26,37,-14,72,-34,39,-64,39,-16,-26,-49,-127,3,-88,24,-26,-66,39,-4,-53,19,-7,-34, 
  /* [4][0][][] */ 62,-16,32,-11,-58,69,36,67,-123,-42,62,48,67,-59,-75,-74,83,70,51,-22,20,-96,-9,50,-43,12,-38,-127,-48,-59,98,46,72,-8,101,83,59,56,56,25,10,35,-50,-41,76,60,81,-54, 
  /* [5][0][][] */ 32,82,19,85,20,24,-59,-90,-106,24,-13,6,21,61,41,-60,78,109,-19,32,-18,-57,-23,-59,-97,-75,-39,64,-5,45,-35,45,-1,-78,69,8,-34,127,-23,-106,-15,-25,-21,-36,0,-21,-30,99, 
  /* [6][0][][] */ 121,54,-3,127,-96,17,4,79,18,-100,68,88,83,-46,-22,-43,72,27,-67,23,80,-22,-37,9,16,66,-53,-42,15,-39,64,52,26,-36,0,90,105,-83,17,18,-91,91,-118,62,74,113,119,-48, 
  /* [7][0][][] */ 15,18,127,46,-33,63,-88,8,-34,99,-16,-11,49,59,17,2,-50,-10,-55,4,-16,36,4,-43,-10,38,51,-13,-2,3,18,-12,-91,-21,67,29,90,1,39,-11,-21,-39,-30,-53,1,-32,7,27, 
};
const TfArray<4, int> tensor_dimension15 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant15_scale = { 8, { 0.0075424844399094582, 0.0032226378098130226, 0.0032223043963313103, 0.0031356210820376873, 0.0032257861457765102, 0.0032556643709540367, 0.0026213568635284901, 0.0041459486819803715, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int32_t tensor_data16[48] = { 10035, -15466, -736, 2301, -249, 10298, 1616, -1883, -11490, 1972, -2308, -1301, -6703, -14445, 4398, -10, -6784, 29172, -1651, -13278, 11105, 52, -3144, -961, -1708, -1196, -3245, -756, -1559, 1903, -644, 18832, 14539, 1371, 6241, 16422, -1104, 18235, 447, -106, -3543, -7072, -2700, 2829, 2578, 25554, 11621, -5841, };
const TfArray<1, int> tensor_dimension16 = { 1, { 48 } };
const TfArray<48, float> quant16_scale = { 48, { 0.00012992791016586125, 7.8192351793404669e-05, 0.001201898674480617, 0.00022735707170795649, 0.00021272228332236409, 0.00013841898180544376, 0.00012847383914049715, 0.00029565990553237498, 9.5889583462849259e-05, 0.00032627300242893398, 0.00019201947725377977, 0.00015180480841081589, 0.00018212193390354514, 0.00010687457688618451, 0.00017895882774610072, 8.1843245425261557e-05, 0.00012612163845915347, 7.1419657615479082e-05, 0.00032561947591602802, 6.3402483647223562e-05, 0.00014434945478569716, 0.00026902160607278347, 0.00016643873823340982, 0.00013245378795545548, 0.00020067562581971288, 0.000233920116443187, 0.00017813456361182034, 0.00025506713427603245, 0.00027191868866793811, 0.00015382694255094975, 0.00010487264808034524, 0.00011702027404680848, 0.00010397885489510372, 0.0001846453087637201, 8.9105880761053413e-05, 9.1754496679641306e-05, 0.00043152490979991853, 0.00012084183981642127, 0.00010805350029841065, 0.0003438645217102021, 0.00013067323016002774, 0.00014621166337747127, 0.00020246008352842182, 0.00012436746328603476, 0.00018308671133127064, 5.7931218179874122e-05, 0.00013725395547226071, 0.00015542887558694929, } };
const TfArray<48, int> quant16_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int8_t tensor_data17[1*3*3*48] = { 
  /* [0][0][][] */ -38,-13,43,10,127,-47,22,13,28,32,12,-10,5,23,-58,25,80,-43,-23,60,-24,6,-42,-9,-12,8,30,-49,-29,127,41,-87,-51,103,127,-91,13,-57,-127,-26,15,-27,-3,-68,2,-39,-122,34, -37,75,-1,40,-4,-72,105,-15,83,15,25,127,67,127,-5,34,112,-80,-3,70,-27,-35,98,-117,13,50,-104,19,-25,-85,117,-127,-127,-91,20,-37,-60,-32,-104,17,-54,-30,25,-127,24,-73,20,49, 1,-20,11,-2,47,-46,20,2,40,25,-27,-49,-22,-5,-56,41,50,-31,-22,66,-13,-8,-55,2,31,10,26,-109,-28,54,-32,-66,14,-2,117,-61,18,-40,-81,12,20,-4,7,-53,-11,-93,-127,-16, 
  /* [0][1][][] */ -127,113,-14,-65,13,-82,18,-12,45,19,34,36,74,114,-57,41,127,-127,14,95,-22,-61,-85,-37,-127,-12,-34,15,-16,0,76,-75,-71,127,-112,-87,35,-76,42,64,-87,26,-67,56,-8,-127,18,-39, -9,127,127,127,-35,102,-127,127,127,-127,-61,73,127,108,127,-109,-58,-98,127,6,-127,127,127,7,94,100,67,127,127,-79,127,-9,-50,-109,-19,-127,127,127,100,60,-46,127,-15,71,127,57,4,-124, -63,56,-36,-50,-55,-127,20,-26,6,6,66,40,23,97,-46,127,90,-113,-13,122,34,-91,-85,-37,33,-20,-36,21,-5,19,71,-51,-3,-40,-125,-48,23,-92,49,-127,-61,38,127,58,-25,-113,-1,127, 
  /* [0][2][][] */ -8,-11,9,-7,33,-34,35,2,58,29,127,26,8,-1,-41,102,83,-63,-48,-4,-20,10,-42,44,-18,-7,-33,-23,8,59,15,6,-34,37,-98,45,-44,-59,43,-39,89,-11,3,-10,-19,-13,19,-28, -68,119,12,18,-82,-127,81,-78,72,23,78,-61,-51,30,-44,112,84,10,-9,127,-66,11,84,127,14,-127,127,5,17,-51,-23,-95,-10,-58,-100,-98,-75,-75,31,32,127,59,-30,25,-24,-93,-73,-6, 50,-11,24,0,-14,-28,31,13,54,25,85,7,17,0,-32,68,39,-55,-61,12,-20,-4,-42,36,15,-14,-34,-61,7,-5,4,16,-25,-3,-53,64,-38,-38,53,1,54,-3,41,-11,-20,-45,30,31, 
};
const TfArray<4, int> tensor_dimension17 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.0066981320269405842, 0.0040310253389179707, 0.0619610995054245, 0.011720866896212101, 0.010966404341161251, 0.0071358699351549149, 0.0066231708042323589, 0.015242061577737331, 0.0049433652311563492, 0.01682024821639061, 0.0098991189152002335, 0.007825944572687149, 0.0093888742849230766, 0.0055096708238124847, 0.0092258071526885033, 0.0042192386463284492, 0.0065019084140658379, 0.0036818748340010643, 0.01678655669093132, 0.0032685680780559778, 0.007441601250320673, 0.013868785463273525, 0.008580363355576992, 0.0068283476866781712, 0.010345366783440113, 0.012059208936989307, 0.0091833146288990974, 0.013149394653737545, 0.014018137007951736, 0.007930191233754158, 0.0054064663127064705, 0.0060327090322971344, 0.0053603886626660824, 0.0095189604908227921, 0.0045936470851302147, 0.0047301901504397392, 0.022246265783905983, 0.0062297210097312927, 0.0055704475380480289, 0.017727138474583626, 0.006736555602401495, 0.0075376033782958984, 0.010437360033392906, 0.0064114760607481003, 0.0094386106356978416, 0.0029865095857530832, 0.00707580940797925, 0.008012775331735611, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 3 };
const ALIGN(16) int32_t tensor_data18[48] = { 554, 6334, -6146, 4386, 2356, 4707, 2628, 8822, 8989, 6536, -1830, -602, 1093, 3559, 2649, -256, -223, 7095, 8047, 418, 2802, 6547, 2756, 4934, 14372, 6548, 1617, 8435, 2565, 4536, -1981, 10022, 1126, 7072, 5557, 4245, 60998, 9036, 4651, 13148, 2074, 799, 3463, 1327, 3075, 2435, 1863, 2774, };
const TfArray<1, int> tensor_dimension18 = { 1, { 48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.00031717165256850421, 0.00011517568782437593, 0.00012674224853981286, 0.00013934739399701357, 0.00020570127526298165, 0.00013542363012675196, 0.00019726519531104714, 0.00010476845636731014, 0.00010133715841220692, 0.00011472919140942395, 0.00020645654876716435, 0.00017672928515821695, 0.00020911198225803673, 0.0001795862044673413, 0.00019256488303653896, 0.00019186396093573421, 0.00019631269969977438, 0.0001094732215278782, 0.00011671904940158129, 0.00016299841809086502, 0.00017599212878849357, 0.00012979519669897854, 0.00019254938524682075, 0.00013859143655281514, 6.1530408856924623e-05, 0.00013354138354770839, 0.00016494287410750985, 0.00010920172644546255, 0.00011016568168997765, 0.00016678097017575055, 0.00022208689188119024, 8.2928207120858133e-05, 0.00029372770222835243, 0.00011302788334432989, 0.0001264989550691098, 0.00017682064208202064, 2.5366438421769999e-05, 0.00010299846326233819, 0.00012140620674472302, 7.8063298133201897e-05, 0.00017147758626379073, 0.00023602717556059361, 0.00018965800700243562, 0.00017056908109225333, 0.00019534079183358699, 0.00014127140457276255, 0.00021029511117376387, 0.0001292860833927989, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const ALIGN(16) int8_t tensor_data19[48*1*1*8] = { 
  /* [0][0][][] */ -87,-127,-36,25,-32,-8,46,-46, 
  /* [1][0][][] */ -16,127,45,-92,4,-93,-72,108, 
  /* [2][0][][] */ -127,-63,42,12,75,8,31,-20, 
  /* [3][0][][] */ -1,-37,-127,-63,28,-57,-34,65, 
  /* [4][0][][] */ -61,-107,107,-24,127,-43,48,-2, 
  /* [5][0][][] */ -21,61,62,-98,112,43,-61,127, 
  /* [6][0][][] */ -127,95,51,77,-54,1,39,-118, 
  /* [7][0][][] */ 42,-21,62,23,50,-127,-2,118, 
  /* [8][0][][] */ -9,61,-12,-40,22,102,127,-65, 
  /* [9][0][][] */ 81,127,16,-62,-75,-64,-51,109, 
  /* [10][0][][] */ 37,-6,31,7,-27,30,-127,-85, 
  /* [11][0][][] */ -81,12,-113,-86,127,23,37,70, 
  /* [12][0][][] */ 94,41,-31,2,127,89,11,5, 
  /* [13][0][][] */ -127,-113,-7,57,-101,42,69,9, 
  /* [14][0][][] */ -19,110,-85,127,-59,122,-25,41, 
  /* [15][0][][] */ -11,-65,-23,-68,127,61,-15,52, 
  /* [16][0][][] */ 63,-72,1,40,34,-14,25,-127, 
  /* [17][0][][] */ -90,-84,-127,107,1,109,88,-122, 
  /* [18][0][][] */ 74,-22,127,0,-43,-118,-87,-29, 
  /* [19][0][][] */ -18,127,25,27,104,-122,-76,-40, 
  /* [20][0][][] */ -76,-21,-127,-50,37,-1,-8,-8, 
  /* [21][0][][] */ -127,-37,49,46,-104,-96,102,-44, 
  /* [22][0][][] */ 42,-9,-127,-62,-29,-11,-12,55, 
  /* [23][0][][] */ -27,33,127,-26,-102,33,-12,-118, 
  /* [24][0][][] */ -97,100,95,107,127,106,1,-33, 
  /* [25][0][][] */ -49,-127,-70,40,-63,44,46,1, 
  /* [26][0][][] */ 88,104,-127,-61,-121,-18,-68,42, 
  /* [27][0][][] */ 58,61,-67,29,-127,11,-30,-12, 
  /* [28][0][][] */ -22,62,27,-97,76,118,-127,-121, 
  /* [29][0][][] */ 38,-3,-1,-71,-127,5,15,-47, 
  /* [30][0][][] */ -97,1,44,127,47,20,-36,-14, 
  /* [31][0][][] */ 4,-127,2,-96,-123,71,-57,-123, 
  /* [32][0][][] */ -127,2,25,-13,7,-38,1,24, 
  /* [33][0][][] */ 55,-55,-127,-105,-9,-1,-45,13, 
  /* [34][0][][] */ 26,79,127,10,-91,-43,56,-67, 
  /* [35][0][][] */ 102,21,24,1,-115,-34,-127,-52, 
  /* [36][0][][] */ 127,16,75,-40,3,-24,69,77, 
  /* [37][0][][] */ 127,115,-10,-4,86,85,-124,30, 
  /* [38][0][][] */ -58,108,127,115,-40,70,27,-67, 
  /* [39][0][][] */ 29,44,127,-47,75,-52,-32,12, 
  /* [40][0][][] */ 66,24,30,8,-81,-127,32,-39, 
  /* [41][0][][] */ 34,-48,16,127,-25,66,7,77, 
  /* [42][0][][] */ -25,-107,74,-50,127,-29,87,20, 
  /* [43][0][][] */ -2,-31,-98,-25,127,45,-84,115, 
  /* [44][0][][] */ 91,-13,127,2,2,25,-60,16, 
  /* [45][0][][] */ -38,38,42,-20,-99,-127,-8,99, 
  /* [46][0][][] */ -65,91,94,25,-12,-19,44,-127, 
  /* [47][0][][] */ 39,-6,17,127,-15,-110,83,70, 
};
const TfArray<4, int> tensor_dimension19 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant19_scale = { 48, { 0.0057930443435907364, 0.0021036490797996521, 0.0023149088956415653, 0.0025451378896832466, 0.0037570716813206673, 0.0024734716862440109, 0.0036029892507940531, 0.0019135641632601619, 0.0018508925568312407, 0.0020954939536750317, 0.0037708664312958717, 0.0032279070001095533, 0.0038193671498447657, 0.0032800876069813967, 0.003517139470204711, 0.0035043372772634029, 0.0035855921451002359, 0.001999495318159461, 0.0021318381186574697, 0.0029771167319267988, 0.0032144428696483374, 0.0023706699721515179, 0.0035168563481420279, 0.0025313307996839285, 0.001123834284953773, 0.0024390930775552988, 0.0030126317869871855, 0.0019945364911109209, 0.0020121429115533829, 0.0030462038703262806, 0.0040563498623669147, 0.0015146586811169982, 0.0053648478351533413, 0.0020644201431423426, 0.0023104650899767876, 0.003229575464501977, 0.00046331033809110522, 0.0018812357448041439, 0.0022174476180225611, 0.0014258025912567973, 0.0031319863628596067, 0.004310965072363615, 0.0034640461672097445, 0.0031153927557170391, 0.003567840438336134, 0.0025802794843912125, 0.0038409766275435686, 0.0023613711819052696, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int32_t tensor_data20[8] = { 1399, -415, 16790, -5844, -10754, -14620, -7705, -2218, };
const TfArray<1, int> tensor_dimension20 = { 1, { 8 } };
const TfArray<8, float> quant20_scale = { 8, { 8.6908701632637531e-05, 0.00011483357957331464, 0.00011755783634725958, 0.00013487320393323898, 0.00016129499999806285, 0.00011656045535346493, 0.000170596715179272, 0.00026539067039266229, } };
const TfArray<8, int> quant20_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int8_t tensor_data21[8*1*1*48] = { 
  /* [0][0][][] */ -12,-26,44,-48,61,87,70,97,105,-44,-14,55,-31,-20,18,-14,46,46,12,-47,-33,19,-82,-34,27,-11,25,-68,-33,30,48,27,27,50,58,21,121,-50,-78,9,-49,-65,-25,0,-65,-78,-127,60, 
  /* [1][0][][] */ -11,-6,-43,50,4,12,-46,-21,-61,29,21,83,-31,3,-31,127,37,61,5,-29,-46,-23,-66,16,11,-7,-22,-90,52,-9,-59,-65,59,-30,-36,-54,31,39,48,-39,3,73,52,-45,1,-36,-56,-23, 
  /* [2][0][][] */ 4,-81,-33,-7,-36,13,-2,6,116,18,-13,-21,-34,-78,32,3,-7,-63,-30,-8,-104,55,6,30,9,51,-47,-31,-24,-46,35,-52,-109,30,-55,51,-76,68,-21,-23,127,-16,-4,44,28,36,-61,-43, 
  /* [3][0][][] */ -33,-113,93,54,21,-106,-20,-13,-127,121,55,-52,47,10,-25,18,51,32,-37,42,73,83,29,-65,11,84,58,29,-29,-72,10,12,-27,2,53,7,-20,-81,-37,41,-28,-10,20,-70,-82,14,-5,28, 
  /* [4][0][][] */ -17,54,-19,72,33,4,7,-5,-58,83,47,72,-1,19,63,13,13,-103,-5,-17,91,-8,-102,59,74,-23,25,27,49,24,-14,-57,-49,127,4,12,59,-29,23,23,-30,46,1,-24,-1,-57,-35,14, 
  /* [5][0][][] */ -28,1,-4,-72,-113,30,116,28,12,64,-17,-23,-99,-12,62,-26,-71,42,-51,-77,-7,99,-3,31,105,25,1,17,-17,-17,127,-50,-10,100,75,91,-18,47,82,32,-19,-39,-20,35,-56,51,27,56, 
  /* [6][0][][] */ 3,-26,-9,24,-54,-52,13,5,19,-11,42,8,-55,-28,35,56,5,-58,5,-59,67,-21,0,-29,8,0,11,35,39,-2,13,127,43,-15,-13,24,6,-10,19,12,2,35,-26,-51,-4,-21,-26,38, 
  /* [7][0][][] */ -26,-17,-43,-4,7,-24,4,14,39,7,25,-1,-9,11,4,2,32,-6,3,-3,-62,10,10,-29,-2,-6,-50,-12,-12,-17,20,31,19,-10,27,14,-18,127,-14,-41,-38,0,-45,-37,25,64,-73,-8, 
};
const TfArray<4, int> tensor_dimension21 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant21_scale = { 8, { 0.0036936197429895401, 0.0048804269172251225, 0.0049962080083787441, 0.0057321111671626568, 0.0068550375290215015, 0.0049538193270564079, 0.0072503602132201195, 0.011279103346168995, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int32_t tensor_data22[48] = { -126, 26180, 27478, 142, 2135, -12049, 20590, 17125, -12862, -1770, -1128, 13284, 18407, -14078, -11527, -2076, 1557, 29939, -463, 118, 54408, 10797, -7363, -5951, 15262, 11613, -1616, -1699, -3986, -167, 28813, 1379, -2343, 6969, 12683, 15073, -1620, 44209, -6318, 699, 23371, -549, 369, 16393, 661, -1595, -7468, 11365, };
const TfArray<1, int> tensor_dimension22 = { 1, { 48 } };
const TfArray<48, float> quant22_scale = { 48, { 0.00026329225511290133, 0.00010430511611048132, 8.628685463918373e-05, 8.3360639109741896e-05, 5.0517508498160169e-05, 0.00012488638458307832, 0.00010873019346036017, 9.8039432486984879e-05, 0.00024939430295489728, 6.6608918132260442e-05, 0.00018694769823923707, 7.6311080192681402e-05, 0.00011012676986865699, 0.00022865194478072226, 6.8348577769938856e-05, 7.6528303907252848e-05, 6.3293286075349897e-05, 0.00015925262414384633, 0.00062933331355452538, 7.2409507993143052e-05, 4.2236915760440752e-05, 7.7197277278173715e-05, 6.1713159084320068e-05, 0.00018968652875628322, 8.068144234130159e-05, 9.2496680736076087e-05, 0.00026205100584775209, 0.00029975528013892472, 0.00011097583046648651, 0.00022897585586179048, 0.00013522530207410455, 7.8992998169269413e-05, 5.6514047173550352e-05, 8.6736494267825037e-05, 8.3187471318524331e-05, 0.00010361029853811488, 8.8571156084071845e-05, 8.23045993456617e-05, 0.00011403450480429456, 8.8197972218040377e-05, 0.00013447209494188428, 0.00020333500287961215, 5.8598303439794108e-05, 0.00010006171214627102, 0.0001381052570650354, 0.00021224013471510261, 0.00020001866505481303, 9.2901609605178237e-05, } };
const TfArray<48, int> quant22_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int8_t tensor_data23[1*3*3*48] = { 
  /* [0][0][][] */ 54,-58,-38,49,68,35,-56,-78,9,58,97,-61,-23,72,89,52,78,-91,67,88,-88,-93,50,67,-67,-22,91,78,105,85,-53,79,61,-76,-114,-65,51,-56,72,15,-85,54,44,-97,61,105,64,-53, 79,-75,-70,84,87,44,-71,-104,21,70,101,-90,-53,88,115,68,71,-104,67,107,-81,-109,72,79,-87,-54,127,97,127,127,-69,96,62,-99,-127,-90,73,-77,69,39,-105,68,41,-90,84,111,69,-80, 34,-39,-43,35,21,5,-28,-48,20,29,24,-31,-44,42,41,23,7,-29,41,14,-8,-87,28,21,-36,-7,46,21,59,54,-26,15,37,-60,-84,-60,14,-34,2,29,-27,32,3,-35,35,19,18,-52, 
  /* [0][1][][] */ 50,-86,-69,79,108,84,-111,-100,94,100,100,-85,-82,98,126,92,120,-106,54,125,-106,-127,84,111,-118,-89,106,104,94,95,-87,104,113,-122,-94,-121,90,-95,122,69,-105,99,102,-127,92,118,41,-84, 52,-127,-127,127,127,127,-127,-127,127,127,127,-127,-127,127,127,127,127,-127,60,127,-127,-123,127,127,-127,-127,124,127,123,100,-127,127,127,-127,-96,-127,127,-127,127,127,-127,127,127,-119,127,127,46,-127, -6,-69,-87,54,47,38,-61,-40,66,44,37,-53,-65,43,52,63,34,-32,27,27,-24,-103,56,69,-71,-15,12,45,68,23,-45,26,67,-111,-85,-67,47,-48,25,59,-21,58,35,-64,48,2,17,-80, 
  /* [0][2][][] */ -44,-56,-51,57,40,45,-46,-29,-84,46,22,-45,-67,41,75,59,60,-30,-85,68,-40,-64,44,54,-75,-69,58,49,28,19,-45,34,60,-71,-8,-39,38,-53,57,72,-23,63,55,-86,36,11,-104,-12, -127,-78,-80,86,52,75,-66,-34,-65,57,37,-66,-110,54,64,71,58,-34,-127,78,-56,-85,65,52,-79,-46,52,48,33,18,-63,38,76,-94,-10,-53,52,-65,56,103,-17,67,92,-95,49,-13,-127,-64, -72,-21,-62,49,22,23,-5,2,-77,27,25,-18,-36,25,26,44,9,-14,-70,36,-26,-4,19,37,-38,6,10,11,12,1,-25,7,37,-37,-11,-20,21,-23,-1,44,7,32,27,-17,12,-15,-52,-26, 
};
const TfArray<4, int> tensor_dimension23 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant23_scale = { 48, { 0.011189920827746391, 0.0044329673983156681, 0.003667191369459033, 0.0035428272094577551, 0.0021469939965754747, 0.0053076711483299732, 0.0046210330910980701, 0.0041666757315397263, 0.010599257424473763, 0.0028308788314461708, 0.0079452767968177795, 0.0032432207372039557, 0.0046803876757621765, 0.009717707522213459, 0.0029048144351691008, 0.0032524527050554752, 0.0026899646036326885, 0.0067682364024221897, 0.026746664196252823, 0.0030774041078984737, 0.0017950688488781452, 0.0032808841206133366, 0.0026228092610836029, 0.0080616772174835205, 0.0034289613831788301, 0.0039311088621616364, 0.011137166991829872, 0.01273959968239069, 0.0047164727002382278, 0.0097314734011888504, 0.005747075192630291, 0.0033572022803127766, 0.0024018469266593456, 0.0036863009445369244, 0.0035354674328118563, 0.0044034374877810478, 0.0037642740644514561, 0.0034979453776031733, 0.004846466239541769, 0.0037484136410057545, 0.0057150637730956078, 0.0086417375132441521, 0.0024904278106987476, 0.0042526228353381157, 0.0058694733306765556, 0.0090202055871486664, 0.0085007930174469948, 0.0039483183063566685, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 3 };
const ALIGN(16) int32_t tensor_data24[48] = { -1351, 4939, 3520, -755, 73, 7776, 3298, 1526, 7960, 1447, -1944, 1520, 3449, 1221, -230, 889, -1080, 8845, -2571, -657, 743, 832, 420, -254, 107, 2426, -1784, -1264, -578, -1998, 8081, 2700, 547, 785, 496, 1095, 776, 6899, 1082, 546, 4722, -1438, 643, 1466, -1489, -1460, 12035, 2895, };
const TfArray<1, int> tensor_dimension24 = { 1, { 48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.00038028976996429265, 0.00017598124395590276, 0.00021897141414228827, 0.00033437987440265715, 0.0006260724039748311, 0.00011274597636656836, 0.00026063772384077311, 0.00029383768560364842, 0.00012788121239282191, 0.00040346125024370849, 0.00023931717441882938, 0.00031868199585005641, 0.00020541419507935643, 0.00036365669802762568, 0.0005442159017547965, 0.00026210243231616914, 0.00032631939393468201, 0.0001135281563620083, 0.00018275465117767453, 0.0004595199425239116, 0.00048759751371107996, 0.00031445035710930824, 0.00032483736868016422, 0.00033851715852506459, 0.00041779733146540821, 0.00022353400709107518, 0.00026424348470754921, 0.00022988767886999995, 0.00037036705180071294, 0.00022053354769013822, 0.00013485086674336344, 0.00025301193818449974, 0.00043088887468911707, 0.00038311918615363538, 0.00030577075085602701, 0.0003586280217859894, 0.00031649990705773234, 0.0001306845952058211, 0.00044787913793697953, 0.00029753011767752469, 0.00020154278900008649, 0.00017183886666316539, 0.00039506750181317329, 0.00030919586424715817, 0.00035664357710629702, 0.00029997286037541926, 9.1351357696112245e-05, 0.00018767682195175439, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const ALIGN(16) int8_t tensor_data25[48*1*1*8] = { 
  /* [0][0][][] */ 30,21,-54,0,-46,46,-127,36, 
  /* [1][0][][] */ 4,-64,-115,-4,-15,-22,127,-103, 
  /* [2][0][][] */ -127,-52,-72,-48,-38,54,-123,-10, 
  /* [3][0][][] */ -51,-43,26,-9,-24,-127,-106,-18, 
  /* [4][0][][] */ -39,-127,-38,15,60,21,-43,-40, 
  /* [5][0][][] */ 68,-39,85,51,-127,58,-73,-97, 
  /* [6][0][][] */ 37,-127,-67,-39,-13,58,-45,-80, 
  /* [7][0][][] */ -21,-80,-64,-65,77,-127,-5,18, 
  /* [8][0][][] */ 33,56,48,51,30,-45,-8,127, 
  /* [9][0][][] */ -25,-54,-56,5,47,-18,127,-11, 
  /* [10][0][][] */ -32,17,-127,16,20,21,106,-112, 
  /* [11][0][][] */ 9,-34,-34,3,-127,15,2,55, 
  /* [12][0][][] */ 84,61,-23,41,-78,127,86,-11, 
  /* [13][0][][] */ -46,-6,21,-14,44,-127,-6,64, 
  /* [14][0][][] */ -95,-53,10,46,8,65,-114,-127, 
  /* [15][0][][] */ 52,76,40,-3,-127,42,113,-50, 
  /* [16][0][][] */ -1,-63,9,74,-17,-69,6,-127, 
  /* [17][0][][] */ -73,127,26,-16,-58,-51,-78,-82, 
  /* [18][0][][] */ 93,127,-94,-100,98,109,-96,-91, 
  /* [19][0][][] */ -31,85,-16,3,-127,10,-76,-92, 
  /* [20][0][][] */ -127,-5,7,10,22,21,101,49, 
  /* [21][0][][] */ -31,-1,46,22,-84,-103,-127,24, 
  /* [22][0][][] */ -5,-36,-43,-11,-127,4,1,62, 
  /* [23][0][][] */ 66,1,-15,-18,127,58,-82,74, 
  /* [24][0][][] */ 127,13,-53,32,-88,7,5,-7, 
  /* [25][0][][] */ 30,-57,74,118,-48,-127,17,108, 
  /* [26][0][][] */ 15,127,4,60,74,-14,22,-11, 
  /* [27][0][][] */ -125,121,61,-18,127,-67,4,97, 
  /* [28][0][][] */ -71,-73,-61,-32,76,-127,24,-17, 
  /* [29][0][][] */ -51,-19,34,45,127,-83,-71,62, 
  /* [30][0][][] */ 127,42,-110,-108,-80,-92,-84,-61, 
  /* [31][0][][] */ 25,5,43,68,-127,12,36,3, 
  /* [32][0][][] */ 127,17,53,49,-44,-57,95,56, 
  /* [33][0][][] */ 127,31,-35,17,-127,-63,24,47, 
  /* [34][0][][] */ 42,-17,-29,16,-51,127,20,-70, 
  /* [35][0][][] */ 123,37,-20,-38,33,-105,23,127, 
  /* [36][0][][] */ -33,-46,67,-87,-31,-10,85,-127, 
  /* [37][0][][] */ 87,-69,63,48,119,-14,34,-127, 
  /* [38][0][][] */ 62,127,5,-29,-22,18,24,78, 
  /* [39][0][][] */ 27,4,-79,77,-24,-66,-78,127, 
  /* [40][0][][] */ -15,-32,3,-27,24,-127,21,38, 
  /* [41][0][][] */ -31,47,-127,-66,86,108,58,-102, 
  /* [42][0][][] */ 34,-50,-47,9,83,127,27,63, 
  /* [43][0][][] */ 1,51,-23,36,-127,-79,60,-67, 
  /* [44][0][][] */ -127,-51,-9,-38,57,55,-117,-79, 
  /* [45][0][][] */ -60,59,-54,16,38,-4,-71,127, 
  /* [46][0][][] */ -38,66,127,-7,-65,-49,-54,46, 
  /* [47][0][][] */ -126,-127,-47,-68,108,108,-42,100, 
};
const TfArray<4, int> tensor_dimension25 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant25_scale = { 48, { 0.003259680699557066, 0.0015084357000887394, 0.0018769289599731565, 0.0028661608230322599, 0.005366424098610878, 0.00096641009440645576, 0.0022340747527778149, 0.0025186506099998951, 0.0010961429215967655, 0.0034582966472953558, 0.0020513241179287434, 0.0027316054329276085, 0.0017607223708182573, 0.0031171091832220554, 0.0046647852286696434, 0.0022466294467449188, 0.0027970697265118361, 0.00097311462741345167, 0.0015664944658055902, 0.0039388076402246952, 0.004179476760327816, 0.0026953334454447031, 0.0027843664865940809, 0.0029016237240284681, 0.0035811795387417078, 0.0019160376396030188, 0.0022649818565696478, 0.0019704985897988081, 0.0031746274325996637, 0.0018903189338743687, 0.0011558837722986937, 0.0021687098778784275, 0.0036933945957571268, 0.0032839332707226276, 0.0026209356728941202, 0.0030740054789930582, 0.0027129014488309622, 0.0011201722081750631, 0.0038390278350561857, 0.0025503004435449839, 0.0017275382997468114, 0.0014729290269315243, 0.0033863491844385862, 0.0026502942200750113, 0.0030569955706596375, 0.0025712386704981327, 0.00078302464680746198, 0.0016086851246654987, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int32_t tensor_data26[8] = { 10066, 13745, 4042, 3315, 2553, -12536, 5754, -8060, };
const TfArray<1, int> tensor_dimension26 = { 1, { 8 } };
const TfArray<8, float> quant26_scale = { 8, { 0.00015231140423566103, 9.9987693829461932e-05, 0.00016184408741537482, 0.0001929500576807186, 0.00012096352293156087, 0.00011941247066715732, 6.9943431299179792e-05, 0.00012818229151889682, } };
const TfArray<8, int> quant26_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int8_t tensor_data27[8*1*1*48] = { 
  /* [0][0][][] */ 35,-46,105,64,28,-39,19,10,-3,56,-31,17,-47,-84,43,7,-111,64,-33,67,-40,69,1,-27,4,-40,68,-29,-24,27,-32,105,-57,-11,-34,-83,-62,-46,-39,-13,-11,58,-127,11,57,20,27,54, 
  /* [1][0][][] */ -53,-37,62,-1,-31,30,-40,-32,47,-11,-2,-28,-20,17,3,17,-2,20,14,-11,-61,-33,-74,-28,26,-34,-28,-32,22,-70,-11,-127,-4,-60,-70,-73,-38,-87,-19,22,44,-21,87,-109,-53,-13,-24,-9, 
  /* [2][0][][] */ -62,93,-2,45,19,9,21,-34,82,-40,79,89,103,21,34,-65,97,-4,12,35,-14,21,13,127,-106,-42,15,-19,-2,85,-28,-85,-12,4,2,-84,-26,11,-38,-15,91,-81,30,0,35,-124,6,-20, 
  /* [3][0][][] */ 55,-22,-52,38,83,-77,-1,-110,-28,-1,-52,-82,-20,127,-9,12,-44,-19,-62,-41,28,72,-8,-48,116,43,58,-66,29,-84,44,-60,60,61,102,-76,-47,17,-24,46,24,85,-69,27,1,19,14,34, 
  /* [4][0][][] */ -53,31,-51,67,93,-31,33,-51,-46,-13,-71,35,-51,-22,-2,-58,13,69,-35,-48,-44,43,-70,-68,13,-15,15,-42,33,-43,-29,65,-14,80,-72,-76,-72,-68,-41,-4,65,-51,127,23,-1,95,-61,-53, 
  /* [5][0][][] */ 60,2,78,-14,-8,20,51,32,127,-5,68,1,73,52,26,-66,-9,36,33,-53,-56,-78,20,45,14,-12,22,45,-38,-29,20,-19,-29,51,-24,62,50,-2,-30,-45,-10,72,29,41,-25,-4,69,10, 
  /* [6][0][][] */ -7,-64,-12,9,34,-7,-2,14,-44,-16,107,52,91,73,-33,49,112,-127,-19,-8,-11,-49,-101,32,-71,74,-31,-2,-14,-46,66,-52,95,14,-71,-19,-37,1,56,10,70,-67,-5,-74,-113,39,-39,23, 
  /* [7][0][][] */ -16,-19,-55,-34,20,106,1,-6,-4,-56,-127,-106,44,54,-61,-44,-36,25,102,23,-17,-70,55,-16,118,-30,-76,93,-38,-5,-29,-83,-45,73,51,119,92,-59,-24,-44,-28,-6,44,-13,1,-27,5,-61, 
};
const TfArray<4, int> tensor_dimension27 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant27_scale = { 8, { 0.0064732343889772892, 0.0042494768276810646, 0.0068783736787736416, 0.0082003772258758545, 0.0051409495063126087, 0.0050750300288200378, 0.0029725958593189716, 0.0054477471858263016, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int32_t tensor_data28[48] = { -959, 485, 643, 189, 718, 8711, 63, -3918, -5068, -407, -7181, 109, -1834, -5897, -1503, -189, -9331, 15190, -3113, 1910, -777, 680, -1307, -913, 17541, -186, -664, -340, 10, 1373, 110, -7870, 14, 12048, -233, 7551, -956, -2474, -722, -376, -2680, -1368, 3452, 5121, 165, 8694, -323, -1094, };
const TfArray<1, int> tensor_dimension28 = { 1, { 48 } };
const TfArray<48, float> quant28_scale = { 48, { 0.00036472076317295432, 0.00013856224541086704, 0.00045486094313673675, 0.00011359481140971184, 0.00013486179523169994, 0.0002791555889416486, 0.00026347994571551681, 0.00018095345876645297, 0.00042349219438619912, 0.00013003457570448518, 0.00046105077490210533, 0.00018182932399213314, 0.00013728997146245092, 0.00016168042202480137, 0.00013359943113755435, 0.00048062982386909425, 0.00025256868684664369, 0.00010227336315438151, 0.00011106189776910469, 0.0005198391736485064, 0.00032981557887978852, 0.00036395742790773511, 0.00018524810730013996, 0.00062211119802668691, 0.00019937445176765323, 0.00032364606158807874, 0.00019447492377366871, 0.00013219527318142354, 0.00018699478823691607, 0.00014962223940528929, 0.00049365486484020948, 0.00052747613517567515, 0.00047269606147892773, 0.00014049586025066674, 0.0005587563500739634, 0.00017575630045030266, 0.00020090228645130992, 8.5491148638539016e-05, 0.0004081471124663949, 0.00076468021143227816, 0.00025023412308655679, 0.00062558642821386456, 0.0005002301768399775, 0.00018400370026938617, 0.000206705168238841, 0.00012582157796714455, 0.00026438484201207757, 0.00036382282269187272, } };
const TfArray<48, int> quant28_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int8_t tensor_data29[1*3*3*48] = { 
  /* [0][0][][] */ -6,-38,40,-30,127,-6,-10,-9,-30,40,-9,10,63,7,127,-39,11,-5,-30,-23,-38,-22,-66,30,-117,46,29,-52,-17,12,-19,-4,-34,38,17,3,86,53,34,-9,66,18,-10,3,-105,-13,-36,-39, 3,-90,-72,-28,-60,-3,36,17,19,-5,64,127,-14,47,-63,127,-2,-54,39,-60,-78,-127,-83,87,-127,-83,19,115,8,29,126,11,-127,-108,-51,36,127,-91,123,12,52,-8,-20,-8,-59,-19,71,1, 14,-9,-11,127,41,10,-86,-3,-21,-43,-22,-16,43,0,-54,-45,25,37,-1,-17,4,-3,-31,18,-44,-62,-26,48,-6,23,-90,-5,13,73,15,18,8,74,-127,2,23,-2,-7,23,-127,-9,-54,46, 
  /* [0][1][][] */ -111,-58,127,-5,-51,-38,76,24,18,92,10,18,39,26,112,29,32,-127,90,37,77,-11,53,-36,-8,-19,38,-60,21,49,35,49,33,-86,4,127,14,51,-41,-118,24,96,-17,-77,30,-80,-58,18, 127,-59,-75,-69,0,-127,127,127,127,15,127,-39,-127,23,-34,-43,127,-121,127,127,127,77,127,-127,-1,-24,104,-35,127,127,-127,127,29,-127,127,-99,-62,127,-98,126,-127,-127,127,-127,98,-127,127,-127, -9,-97,14,77,-33,-7,-53,14,-10,-127,-33,51,68,15,-54,45,26,-11,-2,13,5,-25,43,-23,5,7,-127,91,-71,3,82,19,-13,-99,-17,-41,65,23,124,13,21,57,-44,-1,56,-34,-54,127, 
  /* [0][2][][] */ -8,119,27,-30,75,12,-43,-8,-28,15,-1,3,49,22,95,7,-9,-13,-5,-52,-18,6,-2,16,-21,-13,30,-5,-52,-116,-9,-7,-6,52,-17,37,-51,43,14,104,7,22,-1,10,27,-10,-19,-40, -1,95,-46,19,33,-33,-2,27,30,11,29,-32,32,127,-70,-76,7,-47,103,-84,-48,71,-3,59,66,127,0,127,-71,-114,-17,-1,91,-127,-83,3,-62,-47,-29,-127,39,-19,-57,74,54,12,16,9, 14,127,-12,33,25,13,-64,-3,-19,-20,-2,-4,53,4,-60,-1,-3,-7,-37,-29,-3,1,-5,-1,-42,29,-43,25,42,-83,18,3,8,51,2,-17,-39,62,10,3,-33,-2,0,-19,17,-6,-3,33, 
};
const TfArray<4, int> tensor_dimension29 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.015500632114708424, 0.0058888951316475868, 0.019331589341163635, 0.0048277792520821095, 0.0057316264137625694, 0.011864111758768559, 0.011197897605597973, 0.0076905218884348869, 0.017998417839407921, 0.0055264690890908241, 0.01959465816617012, 0.007727745920419693, 0.0058348234742879868, 0.0068714180961251259, 0.0056779757142066956, 0.020426766946911812, 0.010734168812632561, 0.0043466179631650448, 0.0047201304696500301, 0.022093165665864944, 0.014017161913216114, 0.015468190424144268, 0.0078730443492531776, 0.026439724490046501, 0.0084734139963984489, 0.013754957355558872, 0.0082651842385530472, 0.0056182988919317722, 0.0079472782090306282, 0.0063589452765882015, 0.020980332046747208, 0.022417735308408737, 0.020089581608772278, 0.005971074104309082, 0.023747144266963005, 0.0074696429073810577, 0.0085383467376232147, 0.0036333736497908831, 0.017346251755952835, 0.032498907297849655, 0.010634949430823326, 0.02658742293715477, 0.021259782835841179, 0.0078201573342084885, 0.008784969337284565, 0.0053474167361855507, 0.011236355639994144, 0.01546247024089098, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 3 };
const ALIGN(16) int32_t tensor_data30[48] = { 4676, 1726, 21137, -1963, -1141, 4828, -634, 758, 1993, 178, 5440, 427, 1945, 2951, 2276, 3023, 2247, 2109, -670, 4897, 1514, 409, 956, 11194, 21283, 3573, 3260, -1053, -110, 6090, 4977, 9070, 9802, 4092, 6815, -649, 482, 1827, 6028, 5631, 769, 9743, 9412, 2372, 5713, 1687, 2980, 714, };
const TfArray<1, int> tensor_dimension30 = { 1, { 48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0001793066767277196, 0.00029467829153873026, 6.0270329413469881e-05, 0.00025500415358692408, 0.0003413704689592123, 0.0002171072264900431, 0.00026020396035164595, 0.00066559668630361557, 0.00030655643786303699, 0.00031800917349755764, 0.00015465299657080323, 0.00040926915244199336, 0.00026085413992404938, 0.00025352710508741438, 0.00023391321883536875, 0.00025166026898659766, 0.00020442574168555439, 0.00023749162210151553, 0.00041051473817788064, 0.00019001167675014585, 0.00027034894446842372, 0.00034826653427444398, 0.00028756121173501015, 9.0993977210018784e-05, 7.310885121114552e-05, 0.00023937159858178347, 0.00024656631285324693, 0.00035067141288891435, 0.00068985112011432648, 0.00014793952868785709, 0.00017549619951751083, 0.0001103966060327366, 0.00010072010627482086, 0.00020894361659884453, 0.00013755835243500769, 0.00025551414000801742, 0.00034232914913445711, 0.00023974043142516166, 0.00014806183753535151, 0.00015646385145373642, 0.00023515685461461544, 0.00010167131404159591, 0.00011659545270958915, 0.00031772814691066742, 0.00016559196228627115, 0.00036516232648864388, 0.00024988831137306988, 0.00030981848249211907, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const ALIGN(16) int8_t tensor_data31[48*1*1*8] = { 
  /* [0][0][][] */ -18,24,13,-127,-87,4,28,124, 
  /* [1][0][][] */ 93,-1,-6,4,-91,38,127,30, 
  /* [2][0][][] */ -1,106,-42,-22,-35,80,-51,-127, 
  /* [3][0][][] */ 69,-77,-95,124,-127,-46,-3,-27, 
  /* [4][0][][] */ 39,-58,51,-19,-127,-1,54,24, 
  /* [5][0][][] */ -17,46,-11,-87,-127,-3,-31,11, 
  /* [6][0][][] */ 57,-24,31,35,127,-20,-7,-121, 
  /* [7][0][][] */ 18,28,26,127,22,-13,-4,28, 
  /* [8][0][][] */ 20,23,13,-46,33,127,14,-27, 
  /* [9][0][][] */ 124,24,-18,19,-65,-57,127,85, 
  /* [10][0][][] */ 2,65,-76,-30,4,127,84,-57, 
  /* [11][0][][] */ -13,-33,-127,93,-57,30,-16,76, 
  /* [12][0][][] */ -106,-81,54,53,29,-127,-44,9, 
  /* [13][0][][] */ 39,35,35,52,-59,127,17,-42, 
  /* [14][0][][] */ 11,-95,5,2,-67,-76,-127,102, 
  /* [15][0][][] */ -78,30,1,10,92,-11,-127,-44, 
  /* [16][0][][] */ 86,76,-99,-127,51,118,116,40, 
  /* [17][0][][] */ -107,127,-122,48,-16,-27,26,-118, 
  /* [18][0][][] */ 40,-3,-92,127,-10,-38,-39,-66, 
  /* [19][0][][] */ 111,19,2,19,-45,16,127,35, 
  /* [20][0][][] */ 49,-78,-90,127,58,-34,-21,-74, 
  /* [21][0][][] */ 23,52,127,-108,45,-27,32,-101, 
  /* [22][0][][] */ -85,-38,-123,61,-31,28,6,127, 
  /* [23][0][][] */ 83,20,42,44,-127,111,57,-44, 
  /* [24][0][][] */ -11,1,-127,80,-38,31,43,68, 
  /* [25][0][][] */ 41,-28,-81,127,49,5,-39,-8, 
  /* [26][0][][] */ -77,25,127,-94,-27,31,66,-3, 
  /* [27][0][][] */ -66,78,127,-4,18,-7,76,17, 
  /* [28][0][][] */ -51,-95,42,-127,-21,5,-3,-26, 
  /* [29][0][][] */ -84,-71,-23,98,-13,-127,-23,61, 
  /* [30][0][][] */ -127,40,107,-22,37,25,65,21, 
  /* [31][0][][] */ -57,49,84,-127,-43,15,30,62, 
  /* [32][0][][] */ -79,91,81,-104,15,12,6,127, 
  /* [33][0][][] */ 6,112,-48,57,22,15,-127,-30, 
  /* [34][0][][] */ 91,6,127,-108,-91,-104,44,-44, 
  /* [35][0][][] */ 88,-8,25,95,81,-63,24,-127, 
  /* [36][0][][] */ 23,61,127,-112,25,-20,42,-110, 
  /* [37][0][][] */ -52,-50,101,70,-5,-127,91,-13, 
  /* [38][0][][] */ 72,0,78,36,-36,-53,127,26, 
  /* [39][0][][] */ 59,-85,-20,15,-127,2,78,62, 
  /* [40][0][][] */ -49,41,-127,99,-48,54,-83,121, 
  /* [41][0][][] */ -106,-17,-47,2,127,7,-93,10, 
  /* [42][0][][] */ -80,60,-25,-25,127,28,-111,-53, 
  /* [43][0][][] */ 119,120,-31,127,-10,-99,57,67, 
  /* [44][0][][] */ 1,14,89,-2,39,-127,28,-30, 
  /* [45][0][][] */ -10,-70,127,81,-35,-16,-109,12, 
  /* [46][0][][] */ 41,-119,-127,50,-78,34,-5,-7, 
  /* [47][0][][] */ -106,-28,37,-1,87,38,-127,-39, 
};
const TfArray<4, int> tensor_dimension31 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant31_scale = { 48, { 0.0026531897019594908, 0.0043603363446891308, 0.00089181633666157722, 0.0037732806522399187, 0.0050512375310063362, 0.0032125222496688366, 0.0038502218667417765, 0.0098487930372357368, 0.0045360964722931385, 0.0047055622562766075, 0.0022883908823132515, 0.0060559301637113094, 0.0038598424289375544, 0.0037514250725507736, 0.0034611993469297886, 0.0037238015793263912, 0.0030248749535530806, 0.003514148760586977, 0.0060743610374629498, 0.0028115909080952406, 0.0040003363974392414, 0.0051532783545553684, 0.0042550256475806236, 0.0013464322546496987, 0.0010817871661856771, 0.0035419666673988104, 0.0036484263837337494, 0.0051888632588088512, 0.010207684710621834, 0.0021890520583838224, 0.0025968065019696951, 0.0016335317632183433, 0.0014903491828590631, 0.0030917257536202669, 0.0020354425068944693, 0.0037808266934007406, 0.0050654234364628792, 0.0035474242176860571, 0.002190861850976944, 0.0023151859641075134, 0.0034796013496816158, 0.001504424144513905, 0.0017252557445317507, 0.0047014039009809494, 0.0024502540472894907, 0.0054032844491302967, 0.003697581822052598, 0.0045843650586903095, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int32_t tensor_data32[8] = { -11263, 3661, -16571, -1143, 3551, -1581, 10524, 1248, };
const TfArray<1, int> tensor_dimension32 = { 1, { 8 } };
const TfArray<8, float> quant32_scale = { 8, { 0.00017823700909502804, 0.0001221160200657323, 0.00012105496716685593, 9.0605448349379003e-05, 0.00019730051280930638, 0.00016462709754705429, 0.00016143560060299933, 0.00013131035666447133, } };
const TfArray<8, int> quant32_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int8_t tensor_data33[8*1*1*48] = { 
  /* [0][0][][] */ 48,106,-42,70,-3,-3,-19,7,60,-69,0,-30,9,7,-33,-53,0,-18,30,12,-58,-30,-34,4,16,18,27,-3,14,12,-24,26,-61,11,111,-127,-22,22,-15,112,-32,14,12,-1,-13,38,22,-43, 
  /* [1][0][][] */ -1,-52,36,54,-13,-12,-17,-23,44,-49,92,43,21,11,-47,-85,127,43,14,7,-76,33,41,-12,-49,-98,-35,-53,-15,-63,44,-45,-13,-25,-35,11,4,-21,84,-54,-17,35,-65,35,78,60,16,50, 
  /* [2][0][][] */ 80,-29,-11,-13,106,113,60,76,-31,-10,-2,-29,-8,44,58,31,-25,-36,64,-65,-45,-49,-44,64,-92,-91,120,21,59,-65,-59,22,-127,84,107,23,-9,-1,-3,19,29,68,18,-61,-22,23,53,-43, 
  /* [3][0][][] */ 82,-36,20,-7,121,120,29,41,-36,-23,31,55,-127,43,61,26,11,13,75,-112,-86,18,33,91,12,-35,48,34,48,-60,2,-9,-111,63,-59,-112,22,-38,68,-44,50,-91,-100,-26,-62,45,-9,60, 
  /* [4][0][][] */ 36,45,-29,-39,-16,-13,-20,-18,5,-6,-10,-11,-29,-21,63,50,-41,-18,-33,44,28,-13,-13,0,-52,-40,-5,53,-14,14,-19,25,-32,-16,25,-127,-9,23,11,51,11,-12,-12,-23,43,-1,84,-21, 
  /* [5][0][][] */ 66,60,-95,47,7,4,-8,33,-85,-59,-60,-21,37,24,44,23,36,-62,41,127,-70,-49,-58,48,36,-24,-38,68,32,33,-57,3,-6,4,-63,-2,-9,20,-25,68,17,78,-8,-44,123,26,15,-61, 
  /* [6][0][][] */ -29,-73,16,-46,-43,-39,-76,-75,-36,-65,-115,40,-53,-47,94,88,-127,13,19,-25,18,56,68,7,-8,-11,-71,88,-81,-42,42,74,17,-55,86,39,25,42,-12,-86,-17,-58,-26,16,-41,-22,-7,63, 
  /* [7][0][][] */ 73,16,-20,42,12,11,12,4,79,-6,-10,-20,58,9,-9,-19,-50,-5,-32,3,4,-20,-22,-27,63,-127,14,-4,-3,92,-19,17,-73,25,-56,-43,-11,24,27,23,22,68,-36,-18,-41,27,43,-26, 
};
const TfArray<4, int> tensor_dimension33 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant33_scale = { 8, { 0.0075750728137791157, 0.0051899305544793606, 0.0051448359154164791, 0.0038507315330207348, 0.0083852717652916908, 0.0069966516457498074, 0.0068610128946602345, 0.0055806897580623627, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int32_t tensor_data34[48] = { 2301, 8413, 1703, -3232, 664, 687, 5513, 6782, 2535, -3707, 238, 757, 5862, 3383, 19134, 14486, -1882, -1946, 3384, 2893, 17209, -477, -82, -383, 9807, 2030, 8124, 16873, 6473, 10796, 449, 1256, 971, -4505, -1627, 3155, -2029, 565, 1231, 2436, 3036, 3139, -4071, 1057, -1455, 18, 7331, 817, };
const TfArray<1, int> tensor_dimension34 = { 1, { 48 } };
const TfArray<48, float> quant34_scale = { 48, { 0.0001065730320988223, 0.00013133810716681182, 0.0005096769891679287, 0.00010635590297169983, 0.00082997314166277647, 0.0006289089797064662, 0.00016567730926908553, 0.00020522849808912724, 5.8813253417611122e-05, 0.00033418735256418586, 0.00049846072215586901, 0.00028322325670160353, 0.00023447314742952585, 0.00016397761646658182, 5.9918587794527411e-05, 5.585612598224543e-05, 0.00015016748511698097, 0.0006895002443343401, 7.2236733103636652e-05, 8.9606153778731823e-05, 6.4276639022864401e-05, 0.00073736492777243257, 0.0011353357695043087, 0.00031496619340032339, 3.6416378861758858e-05, 0.00014107137394603342, 7.6334537880029529e-05, 0.00015664589591324329, 0.00022473488934338093, 0.00016680070257280022, 0.0004605825524777174, 0.00054963165894150734, 0.00010817034490173683, 0.0003023285826202482, 6.987818778725341e-05, 7.2466333222109824e-05, 0.00036346475826576352, 0.00046702646068297327, 9.3813963758293539e-05, 0.00021601225307676941, 9.6337869763374329e-05, 0.0002329067065147683, 0.00013127505371812731, 0.00035250966902822256, 8.3487160736694932e-05, 0.00029675744008272886, 7.5345444201957434e-05, 0.00059645774308592081, } };
const TfArray<48, int> quant34_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int8_t tensor_data35[1*3*3*48] = { 
  /* [0][0][][] */ -23,-86,-100,66,-86,3,-90,-71,65,78,127,-40,1,9,-77,-59,101,-89,38,-36,-17,-101,-40,-78,96,97,0,-127,8,-34,60,65,40,69,77,26,104,69,36,7,-116,-7,13,44,-38,111,-35,-92, 92,-11,32,72,-127,43,-54,13,108,92,108,61,-8,-73,-127,-105,124,-35,101,-73,-103,127,127,36,127,90,45,-105,-76,-35,-107,109,88,127,106,105,-12,75,52,-70,-77,-79,9,-53,-54,105,-45,97, 113,0,52,56,-81,11,-26,-6,29,63,-24,-31,-75,5,-32,-53,31,87,46,-9,-61,-23,-88,79,38,21,22,-43,-2,-36,23,37,42,93,10,65,-2,12,55,-4,-45,-4,-8,8,-17,116,-9,-6, 
  /* [0][1][][] */ 39,-127,111,89,89,-73,-127,-127,115,98,120,-50,4,-2,-97,-94,94,127,50,-98,-38,110,31,-127,109,127,115,-127,0,-111,-76,87,107,1,109,62,42,110,66,-4,-12,-20,82,94,-111,127,-124,106, 127,-12,2,127,121,-127,-97,7,127,127,124,55,-28,-127,-116,-127,127,64,127,-127,-127,-117,-110,49,107,125,127,-106,-127,-111,127,127,127,7,127,127,1,127,127,-127,16,-127,124,-86,-127,124,-127,-127, 102,-3,-127,66,84,-61,-37,-8,18,86,-12,-20,-127,4,-21,-35,36,-96,60,-39,-73,9,73,75,59,43,2,-40,-17,-80,-39,30,46,-2,28,74,2,22,83,0,-15,-7,34,-15,-72,77,-38,7, 
  /* [0][2][][] */ 61,-79,6,27,-1,65,-77,-81,34,13,15,52,9,6,-48,-25,27,-38,23,-58,-18,0,16,-81,24,42,76,-11,11,-125,12,18,67,-79,73,26,-127,29,15,-6,24,-4,90,-127,-68,65,-82,-14, 52,6,5,59,8,93,-33,0,25,39,0,-127,-16,-87,-42,-35,48,-8,43,-89,-42,-12,-23,33,22,52,78,-29,-87,-127,-29,19,64,-86,70,24,22,47,59,-50,127,-61,127,100,-102,3,-125,12, -31,-4,-9,37,-22,38,-16,-3,8,11,-82,40,-74,2,-2,1,3,30,19,-8,-34,21,15,37,31,27,27,10,-9,-71,11,-12,3,-45,21,19,9,-11,41,14,65,1,20,-13,-23,40,-24,-9, 
};
const TfArray<4, int> tensor_dimension35 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant35_scale = { 48, { 0.0045293536968529224, 0.0055818697437644005, 0.021661270409822464, 0.004520125687122345, 0.035273857414722443, 0.026728630065917969, 0.0070412852801382542, 0.0087222112342715263, 0.0024995631538331509, 0.014202962629497051, 0.021184580400586128, 0.012036988511681557, 0.0099651087075471878, 0.0069690486416220665, 0.0025465399958193302, 0.0023738853633403778, 0.0063821179792284966, 0.029303759336471558, 0.003070061095058918, 0.0038082615938037634, 0.0027317572385072708, 0.031338009983301163, 0.048251770436763763, 0.01338606234639883, 0.0015476960688829422, 0.0059955334290862083, 0.0032442177180200815, 0.0066574504598975182, 0.0095512326806783676, 0.0070890295319259167, 0.019574757665395737, 0.023359345272183418, 0.0045972396619617939, 0.012848963961005211, 0.002969822846353054, 0.0030798190273344517, 0.015447251498699188, 0.019848624244332314, 0.0039870934560894966, 0.009180520661175251, 0.004094359464943409, 0.0098985349759459496, 0.0055791898630559444, 0.014981660060584545, 0.0035482042003422976, 0.012612191028892994, 0.0032021813094615936, 0.025349453091621399, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 3 };
const ALIGN(16) int32_t tensor_data36[48] = { 8690, 3869, 9517, 1608, 2926, 3132, -3147, 3276, 2060, -2078, -2330, 3988, -2369, -3562, 5654, 1249, -1570, 2184, -1615, 2476, 261, 3181, -294, -2048, -214, -3778, 2076, -3238, 3003, 5842, 513, -44, 5767, 7828, 6170, 3501, 4424, -3588, 939, 3762, -445, -3415, 3234, 1637, 212, -4762, -8819, 1468, };
const TfArray<1, int> tensor_dimension36 = { 1, { 48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.00054412765894085169, 0.00076668488327413797, 0.0001207225868711248, 0.00099284714087843895, 0.00070486648473888636, 0.00059728178894147277, 0.0036939617712050676, 0.0020664727780967951, 0.001223455648869276, 0.00067966768983751535, 0.0001723797176964581, 0.00058137951418757439, 0.00063583266455680132, 0.0019369001965969801, 0.00068359071156010032, 0.0019714937079697847, 0.0011806086404249072, 0.00033253384754061699, 0.0015400411793962121, 0.0024213190190494061, 0.00099666870664805174, 0.00064459460554644465, 0.00019945269741583616, 0.00063356041209772229, 0.0016166093992069364, 0.0011568653862923384, 0.001356977503746748, 0.00052217888878658414, 0.0016122614033520222, 0.00089842377929016948, 0.00033213739516213536, 0.00069559202529489994, 0.0010524330427870154, 0.00035783171188086271, 0.00058013317175209522, 0.00048897560918703675, 0.00071746530011296272, 0.0022788920905441046, 0.00075058522634208202, 0.00081814324948936701, 0.0016913193976506591, 0.00084912602324038744, 0.001066332682967186, 0.00023988264729268849, 0.0018880913266912103, 0.00097714422736316919, 0.00082108622882515192, 0.00072247709613293409, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const ALIGN(16) int8_t tensor_data37[48*1*1*8] = { 
  /* [0][0][][] */ -106,-107,25,-127,-62,-3,-6,-1, 
  /* [1][0][][] */ -127,-19,104,0,-53,20,1,17, 
  /* [2][0][][] */ 17,-10,21,127,21,-23,-17,-3, 
  /* [3][0][][] */ -103,-66,-27,-12,37,127,-47,-32, 
  /* [4][0][][] */ -6,-29,-11,-2,-9,10,-127,-68, 
  /* [5][0][][] */ -1,-33,-16,-2,-10,11,-127,-68, 
  /* [6][0][][] */ 127,8,18,-12,-63,16,2,-8, 
  /* [7][0][][] */ -127,-30,-16,4,74,11,-1,7, 
  /* [8][0][][] */ 21,44,-13,-12,-30,-127,43,19, 
  /* [9][0][][] */ 74,20,-10,-5,-25,-6,-8,127, 
  /* [10][0][][] */ 105,-13,-110,12,-89,-7,36,127, 
  /* [11][0][][] */ -127,110,7,-39,80,-67,6,26, 
  /* [12][0][][] */ 127,-39,-107,10,52,-5,-12,-21, 
  /* [13][0][][] */ 127,11,14,-14,-30,24,6,-13, 
  /* [14][0][][] */ -122,-74,93,-19,68,-8,-35,-127, 
  /* [15][0][][] */ 31,78,-1,-3,-12,-127,-19,11, 
  /* [16][0][][] */ -11,-64,11,4,11,127,10,6, 
  /* [17][0][][] */ 35,-127,-75,-6,-34,126,-56,-17, 
  /* [18][0][][] */ 39,-21,-16,-13,-21,31,127,-10, 
  /* [19][0][][] */ -5,21,-1,-127,-11,37,-3,-10, 
  /* [20][0][][] */ -81,-29,78,8,58,103,-8,-127, 
  /* [21][0][][] */ -21,-5,31,-26,-18,11,-127,-77, 
  /* [22][0][][] */ 70,-13,9,127,-16,-10,53,45, 
  /* [23][0][][] */ 127,-17,-121,-9,27,-21,8,7, 
  /* [24][0][][] */ -31,20,25,35,8,2,-127,-81, 
  /* [25][0][][] */ 127,12,-85,8,15,-7,7,25, 
  /* [26][0][][] */ -3,56,-28,-127,-28,23,4,-5, 
  /* [27][0][][] */ 127,21,-112,0,-107,49,27,75, 
  /* [28][0][][] */ -127,-23,-21,16,52,9,-4,34, 
  /* [29][0][][] */ -9,-127,-17,-118,-12,30,-19,-18, 
  /* [30][0][][] */ -1,89,127,35,35,-100,115,31, 
  /* [31][0][][] */ -72,-3,-127,47,3,-20,91,100, 
  /* [32][0][][] */ -2,-118,-1,-127,-11,11,-9,-17, 
  /* [33][0][][] */ 16,-127,-8,-114,11,19,7,-26, 
  /* [34][0][][] */ -28,-46,32,-99,38,-51,127,76, 
  /* [35][0][][] */ -127,11,57,8,-113,-26,30,96, 
  /* [36][0][][] */ -123,18,127,-12,-39,7,-34,32, 
  /* [37][0][][] */ 127,14,-9,-8,-71,22,1,13, 
  /* [38][0][][] */ -74,-3,75,36,57,-52,45,127, 
  /* [39][0][][] */ -127,-8,78,-2,-72,10,-10,6, 
  /* [40][0][][] */ -6,32,48,-21,27,-13,127,51, 
  /* [41][0][][] */ 127,-15,-73,1,54,13,7,-7, 
  /* [42][0][][] */ -15,-127,35,-11,19,5,-1,-23, 
  /* [43][0][][] */ 14,126,127,-7,61,-103,80,6, 
  /* [44][0][][] */ 6,-12,-2,116,0,-127,-2,2, 
  /* [45][0][][] */ 127,-36,33,-6,-61,102,8,2, 
  /* [46][0][][] */ 7,127,-7,101,-3,118,30,34, 
  /* [47][0][][] */ -15,36,12,-29,25,-36,127,72, 
};
const TfArray<4, int> tensor_dimension37 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0053682741709053516, 0.0075639872811734676, 0.0011910292087122798, 0.0097952662035822868, 0.0069540967233479023, 0.0058926842175424099, 0.03644401952624321, 0.020387480035424232, 0.012070411816239357, 0.0067054899409413338, 0.0017006699927151203, 0.005735794547945261, 0.0062730205245316029, 0.01910913921892643, 0.0067441933788359165, 0.019450431689620018, 0.011647691018879414, 0.0032807241659611464, 0.01519379299134016, 0.02388833649456501, 0.0098329698666930199, 0.0063594644889235497, 0.0019677674863487482, 0.006250603124499321, 0.015949202701449394, 0.011413443833589554, 0.013387717306613922, 0.0051517309620976448, 0.015906305983662605, 0.0088637014850974083, 0.003276812843978405, 0.0068625966086983681, 0.010383130982518196, 0.0035303088370710611, 0.0057234987616539001, 0.0048241531476378441, 0.0070783947594463825, 0.022483173757791519, 0.0074051506817340851, 0.0080716665834188461, 0.016686279326677322, 0.0083773378282785416, 0.010520262643694878, 0.0023666427005082369, 0.018627598881721497, 0.0096403444185853004, 0.0081007014960050583, 0.0071278405375778675, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int32_t tensor_data38[8] = { 3824, -4268, -151, 2830, 2638, 274, -2471, 1842, };
const TfArray<1, int> tensor_dimension38 = { 1, { 8 } };
const TfArray<8, float> quant38_scale = { 8, { 7.020123302936554e-05, 0.00015615126176271588, 0.00010329707583878189, 6.7879991547670215e-05, 0.00012526083446573466, 0.00019787863129749894, 0.00011087678285548463, 0.00018669234123080969, } };
const TfArray<8, int> quant38_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int8_t tensor_data39[8*1*1*8] = { 
  /* [0][0][][] */ -21,-1,-46,-33,-16,37,-127,-9, 
  /* [1][0][][] */ 19,98,0,127,11,-4,-8,-36, 
  /* [2][0][][] */ 127,0,-35,-60,-69,49,93,-53, 
  /* [3][0][][] */ 8,-127,39,-84,13,-80,25,56, 
  /* [4][0][][] */ 120,-2,-61,-11,27,-8,-127,-45, 
  /* [5][0][][] */ 3,-35,3,38,2,-127,0,9, 
  /* [6][0][][] */ 127,-23,116,2,110,-31,-1,10, 
  /* [7][0][][] */ -127,-2,-94,-5,-96,10,37,8, 
};
const TfArray<4, int> tensor_dimension39 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.0029835524037480354, 0.0066364286467432976, 0.0043901256285607815, 0.0028848997317254543, 0.0053235855884850025, 0.0084098419174551964, 0.0047122631222009659, 0.0079344240948557854, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int32_t tensor_data40[8] = { -11198, 11620, 414, -11585, -787, -14429, 403, 92, };
const TfArray<1, int> tensor_dimension40 = { 1, { 8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.00041671592043712735, 0.00054317567264661193, 0.00026112759951502085, 0.00032505925628356636, 0.00032808349351398647, 0.00038549824967049062, 0.0011385264806449413, 0.0036091338843107224, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int8_t tensor_data41[1*3*3*8] = { 
  /* [0][0][][] */ 0,1,17,14,9,2,8,30, 7,3,-36,127,-25,2,-4,29, -4,2,-11,18,-3,3,-6,20, 
  /* [0][1][][] */ -3,-3,127,-26,127,1,-112,40, 127,-127,-102,9,-91,127,-15,-127, -27,3,13,-19,0,1,127,37, 
  /* [0][2][][] */ 3,-2,10,0,13,0,15,33, 5,0,-43,-5,-11,3,-11,-104, -5,-3,-11,-2,3,0,-7,36, 
};
const TfArray<4, int> tensor_dimension41 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant41_scale = { 8, { 0.017710426822304726, 0.023084964603185654, 0.011097922921180725, 0.013815018348395824, 0.013943548314273357, 0.01638367585837841, 0.048387374728918076, 0.15338818728923798, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 3 };
const ALIGN(16) int32_t tensor_data42[8] = { 5161, 3587, -224, 8901, 646, 2118, 36986, -258, };
const TfArray<1, int> tensor_dimension42 = { 1, { 8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.00048572188825346529, 0.00060179148567840457, 0.00047165274736471474, 0.00029426044784486294, 0.00078809616388753057, 0.0011402253294363618, 2.1554105842369609e-05, 5.5827575124567375e-05, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 0 };
const ALIGN(16) int8_t tensor_data43[8*3*3*1] = { 
  /* [0][0][][] */ -57, 50, 9, 
  /* [0][1][][] */ -127, 121, 0, 
  /* [0][2][][] */ -42, 46, 0, 
  /* [1][0][][] */ 57, 127, 35, 
  /* [1][1][][] */ -68, -79, -44, 
  /* [1][2][][] */ 7, -41, 5, 
  /* [2][0][][] */ 32, 28, -46, 
  /* [2][1][][] */ 53, 70, -127, 
  /* [2][2][][] */ 22, 33, -58, 
  /* [3][0][][] */ 43, 54, 21, 
  /* [3][1][][] */ 54, 75, 27, 
  /* [3][2][][] */ -80, -127, -57, 
  /* [4][0][][] */ 5, -53, 48, 
  /* [4][1][][] */ 16, -127, 113, 
  /* [4][2][][] */ 5, -36, 32, 
  /* [5][0][][] */ 2, -56, 0, 
  /* [5][1][][] */ -1, 127, 2, 
  /* [5][2][][] */ 1, -75, 0, 
  /* [6][0][][] */ -16, -92, 5, 
  /* [6][1][][] */ -22, -127, 1, 
  /* [6][2][][] */ -12, -54, 13, 
  /* [7][0][][] */ 42, -127, 28, 
  /* [7][1][][] */ -20, -5, -13, 
  /* [7][2][][] */ -25, 72, -13, 
};
const TfArray<4, int> tensor_dimension43 = { 4, { 8,3,3,1 } };
const TfArray<8, float> quant43_scale = { 8, { 0.12475141882896423, 0.15456239879131317, 0.12113793939352036, 0.075577013194561005, 0.20241236686706543, 0.29285222291946411, 0.0055358950048685074, 0.014338594861328602, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const TfArray<4, int> tensor_dimension44 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant44_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant44_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.093308039009571075, } };
const TfArray<1, int> quant46_zero = { 1, { 26 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,24,24,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.10135988891124725, } };
const TfArray<1, int> quant47_zero = { 1, { 14 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,24,24,48 } };
const TfArray<1, float> quant48_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant48_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,25,25,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant51_scale = { 1, { 0.067581549286842346, } };
const TfArray<1, int> quant51_zero = { 1, { 10 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant52_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant52_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant54_scale = { 1, { 0.1047285795211792, } };
const TfArray<1, int> quant54_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,12,12,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.11666473001241684, } };
const TfArray<1, int> quant55_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,12,12,48 } };
const TfArray<1, float> quant56_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant56_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,13,13,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant59_scale = { 1, { 0.054750427603721619, } };
const TfArray<1, int> quant59_zero = { 1, { 13 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant60_scale = { 1, { 0.019397633150219917, } };
const TfArray<1, int> quant60_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.020918907597661018, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant62_scale = { 1, { 0.038871388882398605, } };
const TfArray<1, int> quant62_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.061639830470085144, } };
const TfArray<1, int> quant63_zero = { 1, { 12 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant64_scale = { 1, { 0.020370280370116234, } };
const TfArray<1, int> quant64_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.018002616241574287, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant66_scale = { 1, { 0.051294736564159393, } };
const TfArray<1, int> quant66_zero = { 1, { -26 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,6,6,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.070676229894161224, } };
const TfArray<1, int> quant67_zero = { 1, { -10 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,6,6,48 } };
const TfArray<1, float> quant68_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant68_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,6,6,32 } };
const TfArray<1, float> quant69_scale = { 1, { 0.037038587033748627, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant70_scale = { 1, { 0.059932641685009003, } };
const TfArray<1, int> quant70_zero = { 1, { -14 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,6,6,3 } };
const TfArray<1, float> quant71_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant71_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,43,42 } };
const TfArray<1, int> outputs0 = { 1, { 44 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 44,41,40 } };
const TfArray<1, int> outputs1 = { 1, { 45 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 45,39,38 } };
const TfArray<1, int> outputs2 = { 1, { 46 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 44,46 } };
const TfArray<1, int> outputs3 = { 1, { 47 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 47,37,36 } };
const TfArray<1, int> outputs4 = { 1, { 48 } };
const TfArray<2, int> inputs5 = { 2, { 48,1 } };
const TfArray<1, int> outputs5 = { 1, { 49 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 49,35,34 } };
const TfArray<1, int> outputs6 = { 1, { 50 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 50,33,32 } };
const TfArray<1, int> outputs7 = { 1, { 51 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 51,31,30 } };
const TfArray<1, int> outputs8 = { 1, { 52 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 52,29,28 } };
const TfArray<1, int> outputs9 = { 1, { 53 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 53,27,26 } };
const TfArray<1, int> outputs10 = { 1, { 54 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 51,54 } };
const TfArray<1, int> outputs11 = { 1, { 55 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 55,25,24 } };
const TfArray<1, int> outputs12 = { 1, { 56 } };
const TfArray<2, int> inputs13 = { 2, { 56,1 } };
const TfArray<1, int> outputs13 = { 1, { 57 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 57,23,22 } };
const TfArray<1, int> outputs14 = { 1, { 58 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 58,21,20 } };
const TfArray<1, int> outputs15 = { 1, { 59 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 59,19,18 } };
const TfArray<1, int> outputs16 = { 1, { 60 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 60,17,16 } };
const TfArray<1, int> outputs17 = { 1, { 61 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 61,15,14 } };
const TfArray<1, int> outputs18 = { 1, { 62 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 59,62 } };
const TfArray<1, int> outputs19 = { 1, { 63 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 63,13,12 } };
const TfArray<1, int> outputs20 = { 1, { 64 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 64,11,10 } };
const TfArray<1, int> outputs21 = { 1, { 65 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 65,9,8 } };
const TfArray<1, int> outputs22 = { 1, { 66 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 63,66 } };
const TfArray<1, int> outputs23 = { 1, { 67 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 67,7,6 } };
const TfArray<1, int> outputs24 = { 1, { 68 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 68,5,4 } };
const TfArray<1, int> outputs25 = { 1, { 69 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 69,3,2 } };
const TfArray<1, int> outputs26 = { 1, { 70 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 70 } };
const TfArray<1, int> outputs27 = { 1, { 71 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 2304, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 96, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 9216), (TfLiteIntArray*)&g0::tensor_dimension44, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension45, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension46, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension47, 4608, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension48, 27648, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension49, 30000, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 30000), (TfLiteIntArray*)&g0::tensor_dimension50, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13824), (TfLiteIntArray*)&g0::tensor_dimension51, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension52, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension53, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 6912), (TfLiteIntArray*)&g0::tensor_dimension54, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension55, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension56, 6912, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension57, 8112, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 8112), (TfLiteIntArray*)&g0::tensor_dimension58, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4608), (TfLiteIntArray*)&g0::tensor_dimension59, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension60, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension61, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension62, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 4320), (TfLiteIntArray*)&g0::tensor_dimension63, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension64, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension65, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 2016), (TfLiteIntArray*)&g0::tensor_dimension66, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension67, 288, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension68, 1728, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 1728), (TfLiteIntArray*)&g0::tensor_dimension69, 1152, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 112), (TfLiteIntArray*)&g0::tensor_dimension70, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension71, 108, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 72, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  71, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_5_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 72;
  for (size_t i = 0; i < 72; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_5_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
